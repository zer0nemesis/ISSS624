---
title: "Take-Home_Ex1"
author: "Roger"
editor: visual
---

# 1. Overview

Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world's accessible freshwater.

Developing countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.

To address the issue of providing clean and sustainable water supply to the rural community, a global [Water Point Data Exchange (WPdx)](https://www.waterpointdata.org/about/) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on [WPDx Data Standard](https://www.waterpointdata.org/wp-content/uploads/2021/04/WPDx_Data_Standard.pdf).

## 1.1 Objectives

Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, appropriate global and local measures of spatial Association techniques will be applied to reveal the spatial patterns of Not Functional water points. For the purpose of this study, Nigeria will be used as the study country.

In the code chunk below, p_load(0 of pacman package is used to load the following R packages into R environment:

-   sf

-   spdep

-   tmap

-   tidyverse

-   funModeling (used for rapid Exploratory Data Analysis)

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, funModeling)
```

# 2. Data Acquisition

## 2.1 Importing the geospatial data

For this study, two geospatial data will be used:

### 2.1.1 Importing water point geospatial data

-   The water point geospatial data will be downloaded from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/), specifically the WPdx+ data set will be used. In the code chunk below, we will import the shapefile as simple features data table into R environment using st_read() of sf package. filter() of dplyr will be used to extract water point records of Nigeria.

```{r}
#| eval: false

wp <- st_read(dsn = "data",
              layer= "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

Next, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format, and saved in the data sub-folder.

```{r}
#| eval: false

write_rds(wp, "data/wp_nga.rds")
```

### 2.1.2 Importing Nigeria LGA boundary geospatial data

-   The Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be the second data set used in this study. The data is downloaded from [geoBoundaries](https://www.geoboundaries.org/). In the code chunk below, we will import the Nigeria LGA boundary shapefile data as a simple features data table into R environment using st_read() of sf package.

```{r}
#| eval: false

nga <- st_read(dsn = "data", 
                 layer = "nga_polnda_adm2_1m_salb",
                 crs = 4326) 
```

## 2.2 Data Wrangling

### 2.2.1 Recoding NA values into string

In the code chunk below, replace_na() of tidyr package is used to recode all the NA values in *status_cle* field into "Unknown".

```{r}
#| eval: false

wp_nga <- read_rds("data/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### 2.2.2 EDA

In the code chunks below, freq() of funModeling package is used to display the distribution of *status_cle* field in *wp_nga*.

```{r}
#| eval: false

freq(data = wp_nga,
     input = "status_cle")
```

### 2.2.3 Extracting functional water point

In the code chunk below, filter() of dplyr is used to select functional water points.

```{r}
#| eval: false

wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
#| eval: false

freq(data= wpt_functional,
     input = "status_cle")
```

### 2.2.4 Extracting non-functional water point

In the code chunk below, filter() of dplyr is used to select non-functional water points.

```{r}
#| eval: false

wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
#| eval: false

freq(data = wpt_nonfunctional,
     input = "status_cle")
```

### 2.2.5 Extracting water point with Unknown Class

In the code chunk below, filter() of dplyr is used to select water points with unknown status.

```{r}
#| eval: false

wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

### 2.2.6 Performing Point-in-Polygon Count

In the code chunk below, st_intersects() of sf is used to identify water points located in each Nigerian province; *lengths()* of Base R is used to calculate numbers of water points that fall inside each province, and mutate() of dplyr package is used to derive four fields, namely: (a) total wpt, (b) wpt functional, (c) wpt non-functional, (d) wpt unknown.

```{r}
#| eval: false

nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

### 2.2.7 Saving the Analytical Data Table

In the code chunk below, mutate() of dplyr package is used to drive two fields, namely pct_functional and pct non-functional. To keep the file size small, select() of dplyr is used to retain only fields 3,4,9,10,18,19,20,21,22 and 23.

```{r}
#| eval: false

nga_wp <- nga_wp %>% 
  mutate(`pct_functional` = `wpt functional` / `total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/ `total wpt`) #%>%
#  select(3:4, 9:10, 18:23)
```

Next, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format, and saved in the data sub-folder.

```{r}
#| eval: false

write_rds(nga_wp, "data/nga_wp.rds")
```

# 3. Visualising the spatial distribution of water points

In the code chunk below, qtm() of tmap package is used to plot the thematic maps depicting Nigeria waterpoints quickly, while tmap_arrange() is used to create multiple stand-alone maps .

```{r}
#| fig-width: 14
#| fig-height: 12

nga_wp <- read_rds("data/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```

# 4. Computing contiguity spatial weights

Building a neighbours list based on regions with contiguous boundaries

## 4.1 Computing (QUEEN) contiguity based neighbours

In the code chunk below, poly2nb() of spdep package is used to compute the Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(nga_wp, queen = TRUE)
summary(wm_q)
```

The summary report above shows that there are 773 area units in Nigeria. The most connected area unit has 13 neighbours, while 2 area units only have one neighbour.

## 4.2 Visualising contiguity weights

A connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs.

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])
```

We will do the same for latitude with one key difference, in that we access the second value per centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

Checking the first few observations to see if things are formatted correctly

```{r}
head(coords)
```

### 

4.2.1 Plotting Queen contiguity based neighbours map

```{r}
plot(nga_wp$geometry, border = "lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

# 5. Computing distance based neighbours

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated with the WGS84 reference ellipsoid.

## 5.1 Determining the cut-off distance

We will first determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of spdep.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first neighbour distance is 71.769k, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

## 5.2 Computing fixed distance weight matrix

Using the code chunk below, we will compute the distance weight matrix using dnearneigh() of spdep.

```{r}
wm_d72 <- dnearneigh(coords, 0, 72, longlat = TRUE)
wm_d72
```

The summary report above shows that on average, each area unit is nearest in distance to another 23 area units.

### 5.2.1 Plotting fixed distance weight matrix

Using the code chunk below, we will plot the distance weight matrix.

```{r}
par(mfrow=c(1,2))
plot(nga_wp$geometry, border = "lightgrey")
plot(k1, coords, add=TRUE, col="red", length = 0.08)
plot(nga_wp$geometry, border = "lightgrey")
plot(wm_d72, coords, add=TRUE)
```
