---
title: "Hands On Ex1B"
author: "Roger Chen"
editor: visual
---

# Overview

Choropleth Mapping with R

## Getting Started

```{r}
pacman::p_load(sf, tmap, tidyverse, dplyr)
```

## Importing Data into R

### Importing geospatial data into R

Importing shapefile into R as a simple feature data frame using st_read()

```{r}
mpsz = st_read(dsn = "data/geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
```

### Examining the contents of mpsz

```{r}
mpsz
```

### Importing attribute data into R

Importing csv file into RStudio and saving the file into a R dataframe called popagsex using read_csv()

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

### Data Preparation

#### Data Wrangling

Using pivot_wider(), mutate(), filter(), group_by(), and select()

```{r}
library(dplyr)
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(POP = sum(Pop)) %>%
  ungroup() %>%
  pivot_wider(names_from = AG,
              values_from = POP) %>%
mutate('YOUNG' = rowSums(.[3:6])+rowSums(.[12])) %>%
mutate('ECONOMY ACTIVE' = rowSums(.[7:11])+rowSums(.[13:15])) %>%
mutate('AGED' = rowSums(.[16:21])) %>%
mutate('TOTAL' = rowSums(.[3:21])) %>%
#mutate('DEPENDENCY' = ('YOUNG' + 'AGED')/ 'ECONOMY ACTIVE') %>%
  select(PA, SZ, 'YOUNG', 'ECONOMY ACTIVE', 'AGED', 'TOTAL')
```

*Problem computing DEPENDENCY, caused by error in "YOUNG" + "AGED": non-numeric argument to binary operator*

#### Joining attribute data and geospatial data

Converting values in PA and SZ fields to uppercase

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ),
            .funs = funs(toupper)) %>%
  filter('ECONOMY ACTIVE' > 0)
```

Joining geographical data and attribute table by planning subzone name using left_join(), to ensure the output is a simple features data frame

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020, 
                          by = c("SUBZONE_N" = "SZ"))
```

```{r}

write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## Chropleth Mapping Geospatial Data Using tmap

Two approaches to prepare thematic map: (a) quick thematic map using qtm(); (b) highly customisable thematic map using tmap elements

### Plotting a choropleth map quickly using qtm()

Easiest and quickest way to draw choropleth map, it is concise and provides a good default visualisation in many cases

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "ECONOMY ACTIVE")
```

*Change from DEPENDENCY to ECONOMY ACTIVE*

## Creating a choropleth map by using tmap's elements

Disadvantages of qtm() is that it makes aesthetics of individual layers difficult to control. To draw a high quality cartographic choropleth map using tmap's drawing elements

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE",
          style = "quantile",
          palette = "Blues",
          title = "Economy Active Ratio") +
    tm_layout(main.title = "Distribution of Economy Active Ratio by planning subzone",
              main.title.position = "center",
              main.title.size = 1.2,
              legend.height = 0.45,
              legend.width = 0.35,
              frame = TRUE)+
  tm_borders(alpha = 0.5)+
  tm_compass(type = "8star", size = 2)+
  tm_scale_bar()+
  tm_grid(alpha = 0.2)+
  tm_credits("SourceSource: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS",
             position = c("left", "bottom"))
```

#### Drawing a base map

Drawing the planning subzone polygons using tm_polygons() and tm_shape() to define input data

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons()
```

#### Drawing a choropleth map using *tm_polygons()*

Showing the geographical distribution of a selected variable by planning subzone, by assigning target variable to *tm_polygons()*.

*by default, missing values are shaded in grey*

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("ECONOMY ACTIVE")
```

#### Drawing a choropleth map using tm_fill() and tm_border()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE")
```

Adding boundaries of the planning subzones

*alpha argument is used to define transparency number (0 being totally transparent and 1 being opaque). Three other arguments for tm_border() are (a) col = border colour, (b) lwd = border line width, (c) lty = border line type.*

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE")+
  tm_borders(lwd = 0.1, alpha = 1)
```

### Data classification methods of tmap

**tmap** provides a 10 data classification methods: (1) *fixed*, (2) *sd*, (3) *equal*, (4) *pretty* (default), (5) *quantile*, (6) *kmeans*, (7) *hclust*, (8) *bclust*, (9) *fisher*, and (10) *jenks*.

#### Plotting choropleth maps with built in classification methods

Quantile data classification using 5 classes

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE",
          n = 5,
          style = "jenks")+
  tm_borders(alpha = 0.5)
```

Using equal data classification method

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE",
          n=5,
          style = "equal")+
  tm_borders(alpha = 0.5)
```

### Plotting choropleth map with custom breaks

Displaying descriptive statistics of ECONOMY ACTIVE field

```{r}
summary(mpsz_pop2020$`ECONOMY ACTIVE`)
```

\
Setting break points at 3K, 4K, 5K, 6K, min and max at 0 and 100K

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE",
          breaks = c(0, 3000, 4000, 5000, 6000, 100000))+
  tm_borders(alpha = 0.5)
```

### Colour Scheme

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

Reversing the colour shading with "-" prefix

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

### Map layouts

Combining all map elements into a cohesive map, which includes objects, title, scale bar, compass, margins and aspect ratios

#### Map legend

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Economy Active Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

#### Map style

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

#### Cartographic furniture

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("ECONOMY ACTIVE", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Economy Active Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

Resetting to default style

```{r}
tmap_style("white")
```

### Drawing small multiple choropleth maps

Small multiple maps, aka facet maps, are composed of many maps arranged side-by-side, or stacked vertically.

Small multiple maps can be plotted in three ways:

\(1\) assigning multiple values to at least one aesthetic arguments;

\(2\) defining group-by variable with tm_facets();

\(3\) creating multiple stand-alone maps with tmap_arrange()

#### Method 1: Assigning multiple values to at least one aesthetic arguments

Creating small multiple maps be defining ncols in tm_fill()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("ECONOMY ACTIVE","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

#### Method 2: Defining group-by variable with tm_facets()

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("ECONOMY ACTIVE",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

#### Method 3: Creating multiple stand-alone maps with tmap_arrange()

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

### Mapping spatial object meeting a selection criterion

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("ECONOMY ACTIVE", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
