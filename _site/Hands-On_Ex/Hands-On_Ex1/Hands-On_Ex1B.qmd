---
title: "Hands On Ex1B"
author: "Roger Chen"
editor: visual
---

# Overview

Choropleth Mapping with R

## Getting Started

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## Importing Data into R

### Importing geospatial data into R

Importing shapefile into R as a simple feature data frame using st_read()

```{r}
mpsz = st_read(dsn = "data/geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
```

### Examining the contents of mpsz

```{r}
mpsz
```

### Importing attribute data into R

Importing csv file into RStudio and saving the file into a R dataframe called popagsex using read_csv()

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## Data Preparation

#### Data Wrangling

Using pivot_wider(), mutate(), filter(), group_by(), and select()

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise('POP' = sum('POP')) %>%
  ungroup() %>%
  pivot_wider(names_from = AG,
              values_from = POP) %>%
  mutate(YOUNG = rowSums(.[3:6])+rowSums(.[12])) %>%
  mutate('ECONOMY ACTIVE' = rowSums(.[7:11])+rowSums(.[13:15])) %>%
  mutate('AGED' = rowSums(.[16:21])) %>%
  mutate('Total' = rowSums(.[3:21])) %>%
  mutate('DEPENDENCY' = ('YOUNG' + 'AGED')/ 'ECONOMY ACTIVE') %>%
  select('PA', 'SZ', 'YOUNG', 'ECONOMY ACTIVE', 'AGED', 'TOTAL', 'DEPENDENCY')
```

#### Joining attribute data and geospatial data

Converting values in PA and SZ fields to uppercase

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ),
            .funs = funs(toupper)) %>%
  filter('ECONOMY ACTIVE' > 0)
```

Joining geographical data and attribute table by planning subzone name using left_join(), to ensure the output is a simple features data frame

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020, 
                          by = c("SUBZONE_N" = "SZ"))
```

## Chropleth Mapping Geospatial Data Using tmap

Two approaches to prepare thematic map: (a) quick thematic map using qtm(); (b) highly customisable thematic map using tmap elements

### Plotting a choropleth map quickly using qtm()

Easiest and quickest way to draw choropleth map, it is concise and provides a good default visualisation in many cases

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

## Plotting the Geospatial Data

Visualising geospatial features using plot(). Default plot of an sf object is a multi-plot of all attributes

```{r}

```

Choosing to plot only the geometry

```{r}

```

Plotting the sf object by using a specific attribute

```{r}

```

## Working with Projection

### Assigning EPSG Code to a simple feature data frame

Example of the coordinate system of mpsz simple feature data frame by using st_crs()

```{r}

```

In order to assign the correct ESPG code from "9001" to "3414" for mpsz data frame, use st_transform()

```{r}

```

Checking the CRS again

```{r}

```

### Transforming the projection of preschool from wgs84 to svy21

Transforming the original data from "geographical coordinate system" to "projected coordinate system"

Projection transformation

```{r}

```

## Importing and Converting an Aspatial Data

### Importing aspatial data

Importing the csv file format using read_csv()

```{r}

```

Using list() of Base R instead of glimpse()

```{r}

```

### Creating a simple feature data frame from an aspatial data frame

Converting listing data frame into a simple feature data frame

```{r}

```

\
Examining the content of the newly created simple feature data frame

```{r}

```

## Geoprocessing with sf package

### Buffering

Computing a five-meter buffers around cycling paths

```{r}

```

Calculating the area of the buffers

```{r}

```

Deriving total land involved using sum() of Base R

```{r}

```

### Point-in-polygon count

Performing two operations at one go: (1) identifying pre-schools located inside each Planning Subzone using st_intersect(); (2) calculating number of pre-schools that fall inside each planning subzone using length()

*\*Warning: **Not** to be confused with st_intersection()*

```{r}

```

Checking the summary statistics

```{r}

```

Listing the planning subzone with the most number of preschool using top_n()

```{r}

```

Calculating the density of pre-school by planning subzone

```{r}

```

Computing the density using mutate()

```{r}

```

## Exploratory Data Analysis

Plotting a histogram to reveal distribution of PreSch Density using hist() of R Graphics

```{r}

```

Using ggplot2

```{r}

```

Plotting a scatterplot to show the relationship between Pre-School density and Pre-School Count using ggplot2

```{r}

```
