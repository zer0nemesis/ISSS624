[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site:\nRecords the learning journey of Roger Chen"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex1/Hands-On_Ex1A.html",
    "href": "Hands-On_Ex/Hands-On_Ex1/Hands-On_Ex1A.html",
    "title": "Hands On Ex1A",
    "section": "",
    "text": "Geospatial Data Wrangling with R\n\n\n\npackages = c('sf', 'tidyverse', 'dplyr')\nfor (p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\nLoading required package: sf\n\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\n\n\n\n\nImporting shapefile into R as a polygon feature data frame using st_read()\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\zer0nemesis\\ISSS624\\Hands-On_Ex\\Hands-On_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n\nImporting shapefile into R as line feature data frame using st_read()\n\ncyclingpath = st_read(dsn = \"data/geospatial\",\n                      layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\zer0nemesis\\ISSS624\\Hands-On_Ex\\Hands-On_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\n\nImporting kml into R, remember that the complete path and kml extension need to be provided\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\zer0nemesis\\ISSS624\\Hands-On_Ex\\Hands-On_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nRetrieving geometry list-column using st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n\n\nLearning more about the associated attribute information in the data frame using glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n\nRevealing complete information of a feature object using head()\n\nhead(mpsz, n = 5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\n\n\nVisualising geospatial features using plot(). Default plot of an sf object is a multi-plot of all attributes\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nChoosing to plot only the geometry\n\nplot(st_geometry(mpsz))\n\n\n\n\nPlotting the sf object by using a specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\nExample of the coordinate system of mpsz simple feature data frame by using st_crs()\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIn order to assign the correct ESPG code from “9001” to “3414” for mpsz data frame, use st_transform()\n\nmpsz3414 <- st_transform(mpsz, 3414)\n\nChecking the CRS again\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nTransforming the original data from “geographical coordinate system” to “projected coordinate system”\nProjection transformation\n\npreschool3414 <- st_transform(preschool, crs = 3414)\n\n\n\n\n\n\n\nImporting the csv file format using read_csv()\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nUsing list() of Base R instead of glimpse()\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\n\n\n\nConverting listing data frame into a simple feature data frame\n\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 4326) %>%\n  st_transform(crs = 3414)\n\n\nExamining the content of the newly created simple feature data frame\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\n\n\n\n\n\n\nComputing a five-meter buffers around cycling paths\n\nbuffer_cycling <- st_buffer(cyclingpath,\n                            dist = 5, nQuadSegs = 30)\n\nCalculating the area of the buffers\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nDeriving total land involved using sum() of Base R\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\n\nPerforming two operations at one go: (1) identifying pre-schools located inside each Planning Subzone using st_intersect(); (2) calculating number of pre-schools that fall inside each planning subzone using length()\n*Warning: Not to be confused with st_intersection()\n\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))\n\nChecking the summary statistics\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nListing the planning subzone with the most number of preschool using top_n()\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nCalculating the density of pre-school by planning subzone\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nComputing the density using mutate()\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n\n\nPlotting a histogram to reveal distribution of PreSch Density using hist() of R Graphics\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nUsing ggplot2\n\nggplot(data = mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+ \n  geom_histogram(bins = 20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school evenly distributed in SG?\",\n       subtitle = \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n       x = \"Pre-school density (per sq km)\",\n       y = \"Frequency\")\n\n\n\n\nPlotting a scatterplot to show the relationship between Pre-School density and Pre-School Count using ggplot2\n\nggplot(mpsz3414, aes(x = as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) + geom_point()"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex1/Hands-On_Ex1B.html",
    "href": "Hands-On_Ex/Hands-On_Ex1/Hands-On_Ex1B.html",
    "title": "Hands On Ex1B",
    "section": "",
    "text": "Choropleth Mapping with R\n\n\n\npacman::p_load(sf, tmap, tidyverse, dplyr)\n\n\n\n\n\n\nImporting shapefile into R as a simple feature data frame using st_read()\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\zer0nemesis\\ISSS624\\Hands-On_Ex\\Hands-On_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\nImporting csv file into RStudio and saving the file into a R dataframe called popagsex using read_csv()\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\nUsing pivot_wider(), mutate(), filter(), group_by(), and select()\n\nlibrary(dplyr)\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from = AG,\n              values_from = POP) %>%\nmutate(`YOUNG` = rowSums(.[3:6])+rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+rowSums(.[13:15])) %>%\nmutate(`AGED` = rowSums(.[16:21])) %>%\nmutate(`TOTAL` = rowSums(.[3:21])) %>%\nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/ `ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n\nConverting values in PA and SZ fields to uppercase\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ),\n            .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nJoining geographical data and attribute table by planning subzone name using left_join(), to ensure the output is a simple features data frame\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020, \n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\nTwo approaches to prepare thematic map: (a) quick thematic map using qtm(); (b) highly customisable thematic map using tmap elements\n\n\nEasiest and quickest way to draw choropleth map, it is concise and provides a good default visualisation in many cases\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nError when fill = “DEPENDENCY”: Fill argument neither colors nor valid variable name(s)\nFill changed from DEPENDENCY to ECONOMY ACTIVE\n\n\n\n\nDisadvantages of qtm() is that it makes aesthetics of individual layers difficult to control. To draw a high quality cartographic choropleth map using tmap’s drawing elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Dependency Ratio\") +\n    tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n              main.title.position = \"center\",\n              main.title.size = 1.2,\n              legend.height = 0.45,\n              legend.width = 0.35,\n              frame = TRUE)+\n  tm_borders(alpha = 0.5)+\n  tm_compass(type = \"8star\", size = 2)+\n  tm_scale_bar()+\n  tm_grid(alpha = 0.2)+\n  tm_credits(\"SourceSource: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",\n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\nDrawing the planning subzone polygons using tm_polygons() and tm_shape() to define input data\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons()\n\n\n\n\n\n\n\nShowing the geographical distribution of a selected variable by planning subzone, by assigning target variable to tm_polygons().\nby default, missing values are shaded in grey\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nAdding boundaries of the planning subzones\nalpha argument is used to define transparency number (0 being totally transparent and 1 being opaque). Three other arguments for tm_border() are (a) col = border colour, (b) lwd = border line width, (c) lty = border line type.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\ntmap provides a 10 data classification methods: (1) fixed, (2) sd, (3) equal, (4) pretty (default), (5) quantile, (6) kmeans, (7) hclust, (8) bclust, (9) fisher, and (10) jenks.\n\n\nQuantile data classification using 5 classes\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing equal data classification method\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n=5,\n          style = \"equal\")+\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nDisplaying descriptive statistics of DEPENDENCY field\n\nsummary(mpsz_pop2020$`DEPENDENCY`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\nSetting break points at 0.6, 0.7, 0.8, 0.9, min and max at 0 and 1\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.6, 0.7, 0.8, 0.9, 1))+\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nReversing the colour shading with “-” prefix\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nCombining all map elements into a cohesive map, which includes objects, title, scale bar, compass, margins and aspect ratios\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nResetting to default style\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\nSmall multiple maps, aka facet maps, are composed of many maps arranged side-by-side, or stacked vertically.\nSmall multiple maps can be plotted in three ways:\n(1) assigning multiple values to at least one aesthetic arguments;\n(2) defining group-by variable with tm_facets();\n(3) creating multiple stand-alone maps with tmap_arrange()\n\n\nCreating small multiple maps be defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nassigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex2/Hands-On_Ex2.html",
    "href": "Hands-On_Ex/Hands-On_Ex2/Hands-On_Ex2.html",
    "title": "Hands-On_Ex2",
    "section": "",
    "text": "Learning how to compute Global and Local Measure of Spatial Autocorrelation (GLSA).\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal development in the province. The task is to apply appropriate spatial stastistical methods to discover if the development are evenly distributed geographically.\n\nif the answer is No, then next question is whether there are signs of spatial clustering\n\nIf the answer is Yes, then the follow on question is where are these clusters\n\n\n\n\nSetting the analytical tools\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\nImporting the data into the r environment\n\nhunan <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\zer0nemesis\\ISSS624\\Hands-On_Ex\\Hands-On_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nPerforming relational join\n\nhunan <- left_join(hunan, hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\nPreparing a basemap and choropleth map showing the distribution of GDPPC 2012 by using qtm()\n\nequal <- tm_shape(hunan)+\n  tm_fill(\"GDPPC\",\n          n=5,\n          style=\"equal\")+\n  tm_borders(alpha=0.5)+\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan)+\n  tm_fill(\"GDPPC\",\n          n=5,\n          style = \"quantile\")+\n  tm_borders(alpha=0.5)+\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile,\n             asp=1,\n             ncol=2)\n\n\n\n\n\n\n\n\nComputing global spatial autocorrelation statistics and performing spatial complete randomness test for global spatial autocorrelation\n\n\nFirst, construct spatial weights of the study area, which will be used to define the neighbourhood relationships between geographical units (aka counties) in the study area\nComputing Queen contiguity weight matrix\nthe summary report shows there are 88 area units in Hunan, most connected area unit has 11 neighbours, while two area units only have 1 neighbour\n\nwm_q <- poly2nb(hunan,\n                queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\nAssigning weights to each neighbouring polygon (e.g. each neighbouring polygon will be assigned equal weight (style = “W”), by assigning fraction 1/(no. of neighbours), then summing the weighted income values\nDrawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under- estimating the true nature of the spatial auto-correlation (other more robust options are available, e.g. style = “B”)\nzero.policy=TRUE option allows for list of non-neighbours\n\nrswm_q <- nb2listw(wm_q,\n                   style=\"W\",\n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nInput of nb2listw() must be an object of class nb. The syntax has two major arguments, namely style and zero.policy:\n\nStyle: can take the following values:\n\n“W” - row standardised (sums over all links to n)\n“B” - basic binary coding\n“C” - globally standardised (sums over all links to n)\n“U” - equal to C divided by number of neighbours (sums over all links to unity)\n“minmax” - divides the weights by the minimum of the maximum row sums and maximum column sums of the input weights (similar to “C” and “U” styles)\n“S” - variance-stabilizing coding scheme\n\nzero.policy: if set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list, which in turn generate lag values of zero.\n\n\n\n\nPerfoming Moran’s I statistical testing using moran.test()\n\nmoran.test(hunan$GDPPC,\n           listw = rswm_q,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\nPerforms permutation test for Moran’s I statistic using moran.mc() (1,000 simulations will be performed)\n\nset.seed(1234)\nbperm = moran.mc(hunan$GDPPC,\n                 listw = rswm_q,\n                 nsim = 999,\n                 zero.policy = TRUE,\n                 na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nExamining simulated Moran’s I test statistics in greater detail, by plotting the distribution of the statistical values as a histogram\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res,\n     freq = TRUE,\n     breaks=20,\n     xlab = \"Simulated Moran's I\")\nabline(v=0,\n       col=\"red\")\n\n\n\n\n\n\n\n\nPerforming Geary’s c statistics\n\n\nPerfoming Geary’s C test for spatial autocorrelation using geary.test()\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\nPerforming permutation test for Geary’s C statistics using geary.mc()\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC,\n               listw=rswm_q,\n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary C\")\nabline(v=1, col=\"red\")\n\n\n\n\n\n\n\n\n\nExamining patterns of spatial autocorrelation or model residuals. They show how correlated are pairs of spatial observations when distance(lag) is increased between them. They are plots of some index of autocorrelation against distance.\n\n\nComputing a 6-lag spatial correlogram. The global spatial autocorrelation used in Moran’s I, then plot the output using plot()\n\nMI_corr <- sp.correlogram(wm_q,\n                          hunan$GDPPC,\n                          order=6,\n                          method=\"I\",\n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nNote: not all autocorrelation are statistically significant. Hence it is important to examine the full analysis\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\nComputing a 6-lag spatial correlogram, using sp.correlogram(). The global spatial autocorrelation used in Geary’s C and plotting its output using plot()\n\nGC_corr <- sp.correlogram(wm_q,\n                          hunan$GDPPC,\n                          order=6,\n                          method=\"C\",\n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilarly, printing the analysis report\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\nLocal indicators of spatial association(aka LISA) are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance, if the study is on cancer rates among census tracts in a given city local clusters in the rates, means there are areas that have higher r lower rates is to be expected by chance alone\n\n\nComputing local Moran’s I using localmoran(). It computes li values, given a set of zi alues and a listw object providing neighbour weighting information for the polygon associated with the zi values\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() returns a matrix of values whose columns are:\n\nli : local Moran’s I statistics\nE.li : expectation of local moran statistics under randomisation hypothesis\nVar.li : variance of local moran statistics under randomisation hypothesis\nZ.li : standard deviation of local moran statistics\nPr() : p-values of local moran statistics\n\n\nprintCoefmat(data.frame(localMI[fips], row.names=hunan$County[fips]), check.names=FALSE)\n\n              localMI.fips.\nAnhua               -0.0225\nAnren               -0.3993\nAnxiang             -0.0015\nBaojing              0.3474\nChaling              0.0206\nChangning            0.0000\nChangsha             4.9022\nChengbu              0.7372\nChenxi               0.1454\nCili                 0.0732\nDao                  0.2142\nDongan               0.1521\nDongkou              0.5292\nFenghuang            0.1801\nGuidong             -0.5916\nGuiyang              0.1824\nGuzhang              0.2847\nHanshou              0.0259\nHengdong             0.0100\nHengnan              0.0281\nHengshan            -0.0058\nHengyang             0.0630\nHongjiang            0.1879\nHuarong             -0.0154\nHuayuan              0.0838\nHuitong              0.2600\nJiahe               -0.1243\nJianghua             0.2865\nJiangyong            0.2434\nJingzhou             0.1827\nJinshi              -0.0120\nJishou              -0.2868\nLanshan              0.0633\nLeiyang              0.0116\nLengshuijiang       -1.7903\nLi                   0.0010\nLianyuan            -0.1467\nLiling               1.3774\nLinli                0.0148\nLinwu               -0.0025\nLinxiang             0.0659\nLiuyang              3.3688\nLonghui              0.8080\nLongshan             0.7566\nLuxi                 0.1818\nMayang               0.2185\nMiluo                1.8704\nNan                 -0.0096\nNingxiang            1.5607\nNingyuan             0.2091\nPingjiang           -0.9896\nQidong               0.1181\nQiyang               0.0620\nRucheng             -0.3699\nSangzhi              0.2505\nShaodong            -0.0327\nShaoshan             2.1223\nShaoyang             0.5950\nShimen              -0.0388\nShuangfeng           0.0093\nShuangpai            0.0806\nSuining              0.3758\nTaojiang            -0.2539\nTaoyuan              0.0147\nTongdao              0.4648\nWangcheng            4.4220\nWugang               0.7100\nXiangtan             0.2453\nXiangxiang           0.2627\nXiangyin             0.5453\nXinhua               0.1181\nXinhuang             0.1573\nXinning              0.6893\nXinshao              0.0576\nXintian             -0.0074\nXupu                 0.3241\nYanling             -0.0690\nYizhang             -0.2684\nYongshun             0.6306\nYongxing             0.4341\nYou                  0.0788\nYuanjiang            0.0002\nYuanling             0.0087\nYueyang              0.0412\nZhijiang             0.1048\nZhongfang           -0.2268\nZhuzhou              0.3286\nZixing              -0.7685\n\n\n\n\nFirst, append the local Moran’s I dataframe onto hunan SpatialPolygonDataFrame\n\nhunan.localMI <- cbind(hunan, localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nPlotting local Moran’s I vlaues using choropleth mapping functions\n\ntm_shape(hunan.localMI)+\n  tm_fill(col = \"Ii\",\n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\")+\n  tm_borders(alpha=0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\nWhile the choropleth shows there is evidence for both positive and negative Ii values, it is useful to consider p-values for each of these values\n\ntm_shape(hunan.localMI)+\n  tm_fill(col=\"Pr.Ii\",\n          breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette = \"-Blues\",\n          title = \"local Moran's I p-values\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\nFor better interpretation, it is better to plot both loal Moran’s I values map and its corresponding p-values next to each other\n\nlocalMI.map <- tm_shape(hunan.localMI)+\n  tm_fill(col = \"Ii\",\n          style=\"pretty\",\n          title = \"local moran statistics\")+\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI)+\n  tm_fill(col = \"Ii\",\n          breasks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette = \"-Blues\",\n          title = \"local Moran's I p-values\")+\n  tm_borders(alpha=0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nLISA cluster map shows the significant locations color coded by type of spatial autocorrelation. First step is to plot the Moran scatterplot.\n\n\nMoran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighbouring locations.\nNote that the plot is split in 4 quadrants. Top right corner belongs to areas that have GDPPC and are surrounded by other areas that have the average level of GDPPC (these are the high-high locations in the lesson slide).\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County),\n                xlab=\"GDPPC 2012\",\n                ylab = \"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\nCentre and scales the variable using scale(). Centering is done by subtracting the mean(omitting the NAs) the corresponding colums, and scaling is done by dividing the (centered) variable by their standard deviations.\nThe as.vector at the end makes sure that the data type is a vector, that maps neatly into the dataframe\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector\n\nPlotting the Moran scatterplot again\n\nnci2 <- moran.plot(hunan$GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\",\n                   ylab= \"Spatially Lag z-GDPPC 2012\")\n\n\n\n\nPreparing LISA map classes\n\nquadrant <- vector(mode=\"numeric\", length=nrow(localMI))\n\nNext, center the variable of interests around its mean\n\nDV <- hunan$GDPPC - mean(hunan$GDPPC)\n\nFollowed by centering the local Moran’s around the mean\n\nC_mI <- localMI[,1] - mean(localMI[,1])\n\nSetting a statistical significance level for the local Moran\n\nsignif <- 0.05\n\nFour command lines to define high-high, low-low, low-high, high-low categories\n\nquadrant[DV > 0 & C_mI>0] <-4\nquadrant[DV < 0 & C_mI<0] <-3\nquadrant[DV > 0 & C_mI<0] <-2\nquadrant[DV < 0 & C_mI>0] <-1\n\nLastly, place non-significant Moran in category 0\n\nquadrant[localMI[,5]>signif] <-0\n\nwe can also combine all the steps\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nDV <- hunan$GDPPC - mean(hunan$GDPPC)     \nC_mI <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV > 0 & C_mI>0] <-4\nquadrant[DV < 0 & C_mI<0] <-3\nquadrant[DV > 0 & C_mI<0] <-2\nquadrant[DV < 0 & C_mI>0] <-1\nquadrant[localMI[,5]>signif] <- 0\n\nPlotting LISA map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI)+\n  tm_fill(col = \"quadrant\",\n          style = \"cat\",\n          palette = colors[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\"))+\n  tm_view(set.zoom.limits = c(11,17))+\n  tm_borders(alpha = 0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both local Moran’s I values map and its corresponding p-values next to each other\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI)+\n  tm_fill(col = \"quadrant\",\n          style = 'cat',\n          palette = colors[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\"))+\n  tm_view(set.zoom.limits = c(11,17))+\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)\n\n\n\n\nHot spot and cold spot area analysis\nBesides detecting clusters and outliers, localised spatial statistics can also detect hot spot and/or cold spot areas\n“Hot spot” generally used across disciplines to describe a region or value that is higher relative to its surroundings\nGetis and Ord’s G-statistics\nGetis and Ord’s G is an alternative spatial statistics to detect spatial anomalies. It looks at neighbours within a defined proximity to identify where either high or low values clusters spatially. Statistically significant hot spots are recognised as areas of high values where other areas within a neighbourhood also share high values too\nAnalysis consists three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\nDeriving distance-based weight matrix\nFirst, define a new set of neighbours. For Getis-Ord, define neighbours based on distance. Two types of distance-based proximity matrix:\n\nfixed distance weight matrix\nadaptive distance weight matrix\n\nDeriving centroid\nFirst, points are needed to associate with each polygon. It will more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this, use a mapping function, which will apply a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package.\nTo get longitude values, map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This will get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nDo the same for latitude with one key difference, access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nUse cbind to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\nDetermine the cut off distance\nFirstly, determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh()\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb()\nReturn the length of neighbour relationship edges by using nbdists(). The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nComputing fixed distance weight matrix\nNow, compute the distance weight matrix by using dnearneigh()\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object. The output spatial weights object is called wm62_lw.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nNext, join the Gi values to their corresponding hunan sf data frame by using the code chunk below. The code chunk will perform three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n\n\nMap the Gi values derived using fixed distance weight matrix.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\nCompute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw)\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\nVisualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex1.html",
    "href": "In-Class_Ex/In-Class_Ex1.html",
    "title": "In-Class_Ex1",
    "section": "",
    "text": "Computing spatial weights using R\n\npackages = c('sf', 'spdep', 'tmap', 'tidyverse')\nfor (p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\nLoading required package: sf\n\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\n\nLoading required package: spdep\n\n\nLoading required package: sp\n\n\nLoading required package: spData\n\n\nTo access larger datasets in this package, install the spDataLarge\npackage with: `install.packages('spDataLarge',\nrepos='https://nowosad.github.io/drat/', type='source')`\n\n\nLoading required package: tmap\n\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\n\nImporting shapefile as simple features object of sf\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\zer0nemesis\\ISSS624\\In-Class_Ex\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nImporting csv file as R dataframe class\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nPerforming relational join\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\n\nPreparing basemap and choropleth map showing the distribution of GDPPC2012 by using qtm()\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nBuilding a neighbours list based on regions with contiguous boundaries\n\n\nComputing Queen contiguity weight matrix\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nSeeing the neighbours for the first polygon in the object\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nRetrieving country name of polygonID=1\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nRevealing county names of five neighbouring polygons\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nRetrieving the GDPPC of these five counties\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nDisplaying the complete weight matrix using str()\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nComputing Rook contiguity weight matrix\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\n\nTo get longitude values, map st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]]and 1.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nDoing the same for latitude, BUT accessing the second value per each centroid with [[2]]\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nPutting longitude and latitude together with cbind\n\ncoords <- cbind(longitude, latitude)\n\nChecking the first few observations for correct formatting\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")\n\n\n\n\n\n\n\n\n\nIdentifying neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.\n\n\nDetermining the upper limit for distance band by:\n\nReturning a matrix with the indices of points belonging to the set of the k nearest neighbours of each other using knearneigh()\nConverting the knn object into a neighbours list of class nd with a list of integer vectors containing neighbour region ids by using knn2nb()\nReturning the length of neighbour relationship edges by using nbdists()\nRemoving the list structure of returned objects by using unlist()\n\n\n#coords <- coordinates(hunan)\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n\nComputing distance weight matrix using dnearneigh()\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nAverage number of links means that on average, each region point area is nearest in distance to another 3.68 point areas\nDisplaying the content of wm_d62 weight matrix\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card()\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\nPlotting distance weight matrix\nThe red lines show the links of 1st nearest neighbours and black lines show links of neighbours within the cut-off distance of 62km\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nAlternatively, we can plot both of them next to each other\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n\n\nMore densely settled areas (usually urban areas) tend to have more neighbours and less densely areas (usually rural counties) tend to have less neighbours.\nControlling the number of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposin symmetry\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nnotice for both knearneigh() and str(), each county has EXACTLY six neighbours\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n\nPlotting weight matrix\n\nplot(hunan$geometry, border= \"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\nDeriving spatial weight matrix based on Inversed Distance method\nFirst, compute distances between areas using nbdists()\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nAssigning weights to each neighbouring polygon (e.g. each neighbouring polygon will be assigned equal weight (style = “W”), by assigning fraction 1/(no. of neighbours), then summing the weighted income values\nDrawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under- estimating the true nature of the spatial auto-correlation (other more robust options are available, e.g. style = “B”)\nzero.policy=TRUE option allows for list of non-neighbours\n\nrswm_q <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nWeight of first polygon’s four neighbours type. Each neighbour is assigned a 0.2 of total weight. This means that each neighbour’s income will be multiplied by 0.2 before being tallied\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\n\nrswm_ids <- nb2listw(wm_q, glist = ids, style = \"B\", zero.policy = TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\n\nCreating four different spatial lagged variables:\n\nMethod 1: Spatial lag with row standardised weights\nMethod 2: Spatial lag as a sum of neighbouring values\nMethod 3: Spatial window average\nMethod 4: Spatial window sum\n\n\n\nComputing average neighbour GDPPC value for polygon (these values referred to as spatially lagged values)\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRetrieving the GDPPC of these five counties\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nAppending the spatially lagged GDPPC values onto hunan sf data frame\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nShowing the average neighbouring income values for each county\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlotting both GDPPC and spatial lag GDPPC for comparison\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp = 1, ncol=2)\n\n\n\n\n\n\n\nCalculating spatial lag as a sum of neighboring values by assigning binary weights\nStart by applying a function that will assign a value of 1 per each neighbor. using lapply\n\nb_weights <- lapply(wm_q, function(x) 0*x +1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights,\n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nComputing a lag variable from weight and GDPPC using lag.listw\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nAppending lag_sum GDPPC into hunan sf data frame\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nPlotting GDPPC and Spatial Lag Sum GDPPC for comparison\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nUsing row-standardised weights and includes the diagonal element. To begin, assign k6 to a new variable as its structure will be altered to add the diagonal elements\n\nwm_q1 <- wm_q\n\nAdding the diagonal element to the neighbour list using include.self()\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nObtaining weights with nb2listw()\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nCreating the lag variable from weight structure and GDPPC variable\n\nlag_w_avg_gdppc <- lag.listw(wm_q1,\n                             hunan$GDPPC)\nlag_w_avg_gdppc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nConverting lag variable listw object into a data .frame using as.data.frame()\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nAppending lag_window_avg GDPPC values onto hunan sf data.frame by using left_join()\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nPLotting GDPPC and lag_window_ave GDPPC using qtm()\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nCounter part of window average, without using row-standardised weights. To do this, assign binary weights to neighbour structure that includes diagonal element\n\nwm_q1 <- wm_q\n\nAdding diagonal element to the neighbour list using include.self()\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nAssigning binary weights to neighbour structure that includes diagonal element\n\nb_weights <- lapply(wm_q1, function (x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nExplicitly assigning weight values using nb2listw() and glist()\n\nb_weights2 <- nb2listw(wm_q1,\n                       glist = b_weights,\n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nComputing lag variable with new weight structure, using lag.listw()\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nConverting lag variable listw object into a data frame using as.data.frame()\nNote: second command line renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nAppending w_sum GDPPC values onto hunan sf data.frame using left_join()\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nPlotting GDPPC and lag_sum GDPPC using qtm()\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "Welcome to ISS624 Geospatial Analytics Applications!\nIn this webpage, we are going to share with you my learning journey for geospatial analytics.\nStarting from:\n\nGeospatial Data Wrangling with R\nChropleth Mapping with R\nSpatial Weights and Applications\nGlobal and Local Measures of Spatial Autocorrelation"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html",
    "title": "Take-Home_Ex1",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\n\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, appropriate global and local measures of spatial Association techniques will be applied to reveal the spatial patterns of Not Functional water points. For the purpose of this study, Nigeria will be used as the study country.\nIn the code chunk below, p_load(0 of pacman package is used to load the following R packages into R environment:\n\nsf\nspdep\ntmap\ntidyverse\nfunModeling (used for rapid Exploratory Data Analysis)\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, funModeling)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#importing-the-geospatial-data",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#importing-the-geospatial-data",
    "title": "Take-Home_Ex1",
    "section": "2.1 Importing the geospatial data",
    "text": "2.1 Importing the geospatial data\nFor this study, two geospatial data will be used:\n\n2.1.1 Importing water point geospatial data\n\nThe water point geospatial data will be downloaded from WPdx Global Data Repositories, specifically the WPdx+ data set will be used. In the code chunk below, we will import the shapefile as simple features data table into R environment using st_read() of sf package. filter() of dplyr will be used to extract water point records of Nigeria.\n\n\nwp <- st_read(dsn = \"data\",\n              layer= \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format, and saved in the data sub-folder.\n\nwrite_rds(wp, \"data/wp_nga.rds\")\n\n\n\n2.1.2 Importing Nigeria LGA boundary geospatial data\n\nThe Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be the second data set used in this study. The data is downloaded from geoBoundaries. In the code chunk below, we will import the Nigeria LGA boundary shapefile data as a simple features data table into R environment using st_read() of sf package.\n\n\nnga <- st_read(dsn = \"data\", \n                 layer = \"nga_polnda_adm2_1m_salb\",\n                 crs = 4326)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#data-wrangling",
    "title": "Take-Home_Ex1",
    "section": "2.2 Data Wrangling",
    "text": "2.2 Data Wrangling\n\n2.2.1 Recoding NA values into string\nIn the code chunk below, replace_na() of tidyr package is used to recode all the NA values in status_cle field into “Unknown”.\n\nwp_nga <- read_rds(\"data/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\n2.2.2 EDA\nIn the code chunks below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = \"status_cle\")\n\n\n\n2.2.3 Extracting functional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data= wpt_functional,\n     input = \"status_cle\")\n\n\n\n2.2.4 Extracting non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data = wpt_nonfunctional,\n     input = \"status_cle\")\n\n\n\n2.2.5 Extracting water point with Unknown Class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n2.2.6 Performing Point-in-Polygon Count\nIn the code chunk below, st_intersects() of sf is used to identify water points located in each Nigerian province; lengths() of Base R is used to calculate numbers of water points that fall inside each province, and mutate() of dplyr package is used to derive four fields, namely: (a) total wpt, (b) wpt functional, (c) wpt non-functional, (d) wpt unknown.\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\n\n\n2.2.7 Saving the Analytical Data Table\nIn the code chunk below, mutate() of dplyr package is used to drive two fields, namely pct_functional and pct non-functional. To keep the file size small, select() of dplyr is used to retain only fields 3,4,9,10,18,19,20,21,22 and 23.\n\nnga_wp <- nga_wp %>% \n  mutate(`pct_functional` = `wpt functional` / `total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/ `total wpt`) #%>%\n#  select(3:4, 9:10, 18:23)\n\nNext, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format, and saved in the data sub-folder.\n\nwrite_rds(nga_wp, \"data/nga_wp.rds\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "title": "Take-Home_Ex1",
    "section": "1.2.3 Visualising the spatial distribution of water points",
    "text": "1.2.3 Visualising the spatial distribution of water points\nIn the code chunk below, qtm() of tmap package is used to plot the thematic maps depicting Nigeria waterpoints quickly, while tmap_arrange() is used to create multiple stand-alone maps .\n\nnga_wp <- read_rds(\"data/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\")\nwp_functional <- qtm(nga_wp, \"wpt functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")\nunknown <- qtm(nga_wp, \"wpt unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1A.html",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1A.html",
    "title": "Take-Home_Ex1",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\n\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, appropriate global and local measures of spatial Association techniques will be applied to reveal the spatial patterns of Not Functional water points. For the purpose of this study, Nigeria will be used as the study country.\nIn the code chunk below, p_load(0 of pacman package is used to load the following R packages into R environment:\n\nsf\nspdep\ntmap\ntidyverse\nfunModeling (used for rapid Exploratory Data Analysis)\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, funModeling)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1A.html#importing-the-geospatial-data",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1A.html#importing-the-geospatial-data",
    "title": "Take-Home_Ex1",
    "section": "1.2.1 Importing the geospatial data",
    "text": "1.2.1 Importing the geospatial data\nFor this study, two geospatial data will be used:\n\n1.2.1.1 Importing water point geospatial data\n\nThe water point geospatial data will be downloaded from WPdx Global Data Repositories, specifically the WPdx+ data set will be used. In the code chunk below, we will import the shapefile as simple features data table into R environment using st_read() of sf package. filter() of dplyr will be used to extract water point records of Nigeria.\n\n\nwp <- st_read(dsn = \"data\",\n              layer= \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format, and saved in the data sub-folder.\n\nwrite_rds(wp, \"data/wp_nga.rds\")\n\n\n\n1.2.1.2 Importing Nigeria LGA boundary geospatial data\n\nThe Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be the second data set used in this study. The data is downloaded from geoBoundaries. In the code chunk below, we will import the Nigeria LGA boundary shapefile data as a simple features data table into R environment using st_read() of sf package.\n\n\nnga <- st_read(dsn = \"data\", \n                 layer = \"nga_polnda_adm2_1m_salb\",\n                 crs = 4326)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1A.html#data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1A.html#data-wrangling",
    "title": "Take-Home_Ex1",
    "section": "1.2.2 Data Wrangling",
    "text": "1.2.2 Data Wrangling\n\n1.2.2.1 Recoding NA values into string\nIn the code chunk below, replace_na() of tidyr package is used to recode all the NA values in status_cle field into “Unknown”.\n\nwp_nga <- read_rds(\"data/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\n1.2.2.2 EDA\nIn the code chunks below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = \"status_cle\")\n\n\n\n1.2.2.3 Extracting functional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data= wpt_functional,\n     input = \"status_cle\")\n\n\n\n1.2.2.4 Extracting non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data = wpt_nonfunctional,\n     input = \"status_cle\")\n\n\n\n1.2.2.5 Extracting water point with Unknown Class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n1.2.2.6 Performing Point-in-Polygon Count\nIn the code chunk below, st_intersects() of sf is used to identify water points located in each Nigerian province; lengths() of Base R is used to calculate numbers of water points that fall inside each province, and mutate() of dplyr package is used to derive four fields, namely: (a) total wpt, (b) wpt functional, (c) wpt non-functional, (d) wpt unknown.\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\n\n\n1.2.2.7 Saving the Analytical Data Table\nIn the code chunk below, mutate() of dplyr package is used to drive two fields, namely pct_functional and pct non-functional. To keep the file size small, select() of dplyr is used to retain only fields 3,4,9,10,18,19,20,21,22 and 23.\n\nnga_wp <- nga_wp %>% \n  mutate(`pct_functional` = `wpt functional` / `total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/ `total wpt`) #%>%\n#  select(3:4, 9:10, 18:23)\n\nNext, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format, and saved in the data sub-folder.\n\nwrite_rds(nga_wp, \"data/nga_wp.rds\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1A.html#visualising-the-spatial-distribution-of-water-points",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1A.html#visualising-the-spatial-distribution-of-water-points",
    "title": "Take-Home_Ex1",
    "section": "1.2.3 Visualising the spatial distribution of water points",
    "text": "1.2.3 Visualising the spatial distribution of water points\n\nnga_wp <- read_rds(\"data/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\")\nwp_functional <- qtm(nga_wp, \"wpt functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")\nunknown <- qtm(nga_wp, \"wpt unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#computing-queen-contiguity-based-neighbours",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#computing-queen-contiguity-based-neighbours",
    "title": "Take-Home_Ex1",
    "section": "4.1 Computing (QUEEN) contiguity based neighbours",
    "text": "4.1 Computing (QUEEN) contiguity based neighbours\nIn the code chunk below, poly2nb() of spdep package is used to compute the Queen contiguity weight matrix.\n\nwm_q <- poly2nb(nga_wp, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13 \n  2  13  53 117 178 156 121  71  41  15   4   1   1 \n2 least connected regions:\n475 505 with 1 link\n1 most connected region:\n516 with 13 links\n\n\nThe summary report above shows that there are 773 area units in Nigeria. The most connected area unit has 13 neighbours, while 2 area units only have one neighbour."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#visualising-contiguity-weights",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#visualising-contiguity-weights",
    "title": "Take-Home_Ex1",
    "section": "4.2 Visualising contiguity weights",
    "text": "4.2 Visualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs.\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])\n\nWe will do the same for latitude with one key difference, in that we access the second value per centroid with [[2]].\n\nlatitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\nChecking the first few observations to see if things are formatted correctly\n\nhead(coords)\n\n     longitude latitude\n[1,]  7.371644 5.106900\n[2,]  7.350650 5.081346\n[3,]  7.807885 5.515729\n[4,]  7.610951 5.664240\n[5,]  7.584973 5.406009\n[6,]  7.401408 5.290573\n\n\n\n\n4.2.1 Plotting Queen contiguity based neighbours map\n\nplot(nga_wp$geometry, border = \"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#determining-the-cut-off-distance",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#determining-the-cut-off-distance",
    "title": "Take-Home_Ex1",
    "section": "5.1 Determining the cut-off distance",
    "text": "5.1 Determining the cut-off distance\nWe will first determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.001  12.555  20.575  22.026  28.240  71.769 \n\n\nThe summary report shows that the largest first neighbour distance is 71.769k, so using this as the upper threshold gives certainty that all units will have at least one neighbour."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#computing-fixed-distance-weight-matrix",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#computing-fixed-distance-weight-matrix",
    "title": "Take-Home_Ex1",
    "section": "5.2 Computing fixed distance weight matrix",
    "text": "5.2 Computing fixed distance weight matrix\nUsing the code chunk below, we will compute the distance weight matrix using dnearneigh() of spdep.\n\nwm_d72 <- dnearneigh(coords, 0, 72, longlat = TRUE)\nwm_d72\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 18114 \nPercentage nonzero weights: 3.031485 \nAverage number of links: 23.43338 \n\n\nThe summary report above shows that on average, each area unit is nearest in distance to another 23 area units.\n\n5.2.1 Plotting fixed distance weight matrix\nUsing the code chunk below, we will plot the distance weight matrix.\n\npar(mfrow=c(1,2))\nplot(nga_wp$geometry, border = \"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length = 0.08)\nplot(nga_wp$geometry, border = \"lightgrey\")\nplot(wm_d72, coords, add=TRUE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html",
    "href": "Take-Home_Ex/Take-Home_Ex1.html",
    "title": "Take-Home_Ex1",
    "section": "",
    "text": "Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard.\n\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, appropriate global and local measures of spatial Association techniques will be applied to reveal the spatial patterns of Not Functional water points. For the purpose of this study, Nigeria will be used as the study country.\nIn the code chunk below, p_load(0 of pacman package is used to load the following R packages into R environment:\n\nsf\nspdep\ntmap\ntidyverse\nfunModeling (used for rapid Exploratory Data Analysis)\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, funModeling)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#importing-the-geospatial-data",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#importing-the-geospatial-data",
    "title": "Take-Home_Ex1",
    "section": "2.1 Importing the geospatial data",
    "text": "2.1 Importing the geospatial data\nFor this study, two geospatial data will be used:\n\n2.1.1 Importing water point geospatial data\n\nThe water point geospatial data will be downloaded from WPdx Global Data Repositories, specifically the WPdx+ data set will be used. In the code chunk below, we will import the shapefile as simple features data table into R environment using st_read() of sf package. filter() of dplyr will be used to extract water point records of Nigeria.\n\n\nwp <- st_read(dsn = \"data\",\n              layer= \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format, and saved in the data sub-folder.\n\nwrite_rds(wp, \"data/wp_nga.rds\")\n\n\n\n2.1.2 Importing Nigeria LGA boundary geospatial data\n\nThe Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data will be the second data set used in this study. The data is downloaded from geoBoundaries. In the code chunk below, we will import the Nigeria LGA boundary shapefile data as a simple features data table into R environment using st_read() of sf package.\n\n\nnga <- st_read(dsn = \"data\", \n                 layer = \"nga_polnda_adm2_1m_salb\",\n                 crs = 4326)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#data-wrangling",
    "title": "Take-Home_Ex1",
    "section": "2.2 Data Wrangling",
    "text": "2.2 Data Wrangling\n\n2.2.1 Recoding NA values into string\nIn the code chunk below, replace_na() of tidyr package is used to recode all the NA values in status_cle field into “Unknown”.\n\nwp_nga <- read_rds(\"data/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\n\n\n2.2.2 Exploratory data analysis (EDA)\nIn the code chunks below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = \"status_cle\")\n\n\n\n2.2.3 Extracting functional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data= wpt_functional,\n     input = \"status_cle\")\n\n\n\n2.2.4 Extracting non-functional water point\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\nfreq(data = wpt_nonfunctional,\n     input = \"status_cle\")\n\n\n\n2.2.5 Extracting water point with unknown class\nIn the code chunk below, filter() of dplyr is used to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")\n\n\n\n2.2.6 Performing point-in-polygon count\nIn the code chunk below, st_intersects() of sf is used to identify water points located in each Nigerian province; lengths() of Base R is used to calculate numbers of water points that fall inside each province, and mutate() of dplyr package is used to derive four fields, namely: (a) total wpt, (b) wpt functional, (c) wpt non-functional, (d) wpt unknown.\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\n\n\n2.2.7 Saving the analytical data table\nIn the code chunk below, mutate() of dplyr package is used to drive two fields, namely pct_functional and pct non-functional. To keep the file size small, select() of dplyr is used to retain only fields 3,4,9,10,18,19,20,21,22 and 23.\n\nnga_wp <- nga_wp %>% \n  mutate(`pct_functional` = `wpt functional` / `total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/ `total wpt`) #%>%\n#  select(3:4, 9:10, 18:23)\n\nNext, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format, and saved in the data sub-folder.\n\nwrite_rds(nga_wp, \"data/nga_wp.rds\")\n\n\n\n2.2.8 Assigning EPSG code to the simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nUsing the code chunk below, we will examine the current coordinate system of nga_wp simple feature data frame by using st_crs() of sf package.\n\nst_crs(nga_wp)\n\nAlthough the nga_wpdata frame is projected in WGS84 but when we read until the end of the print, it indicates that the EPSG is 4326. This is a wrong EPSG code because the correct EPSG code for WGS84 should be either 26391, 26392, or 26303\nUsing the code below, st_transform() of sf package is used to assign the correct EPSG code (which we will select 26391) to nga_wp data frame.\n\nnga_wp26391 <- st_transform(nga_wp,\n                            crs = 26391)\n\nUsing the code chunk below, we will check the CRS again.\n\nst_crs(nga_wp26391)\n\nNext, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format, and saved in the data sub-folder.\n\nwrite_rds(nga_wp26391, \"data/nga_wp26391.rds\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#computing-queen-contiguity-based-neighbours",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#computing-queen-contiguity-based-neighbours",
    "title": "Take-Home_Ex1",
    "section": "4.1 Computing (QUEEN) contiguity based neighbours",
    "text": "4.1 Computing (QUEEN) contiguity based neighbours\nIn the code chunk below, poly2nb() of spdep package is used to compute the Queen contiguity weight matrix.\n\nwm_q <- poly2nb(nga_wp, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \nLink number distribution:\n\n  1   2   3   4   5   6   7   8   9  10  11  12  13 \n  2  13  53 117 178 156 121  71  41  15   4   1   1 \n2 least connected regions:\n475 505 with 1 link\n1 most connected region:\n516 with 13 links\n\n\nThe summary report above shows that there are 773 area units in Nigeria. The most connected area unit has 13 neighbours, while 2 area units only have one neighbour each."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#visualising-contiguity-weights",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#visualising-contiguity-weights",
    "title": "Take-Home_Ex1",
    "section": "4.2 Visualising contiguity weights",
    "text": "4.2 Visualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs.\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])\n\nWe will do the same for latitude with one key difference, in that we access the second value per centroid with [[2]].\n\nlatitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\nChecking the first few observations to see if things are formatted correctly\n\nhead(coords)\n\n     longitude latitude\n[1,]  7.371644 5.106900\n[2,]  7.350650 5.081346\n[3,]  7.807885 5.515729\n[4,]  7.610951 5.664240\n[5,]  7.584973 5.406009\n[6,]  7.401408 5.290573\n\n\n\n4.2.1 Plotting Queen contiguity based neighbours map\n\nplot(nga_wp$geometry, border = \"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#determining-the-cut-off-distance",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#determining-the-cut-off-distance",
    "title": "Take-Home_Ex1",
    "section": "5.1 Determining the cut-off distance",
    "text": "5.1 Determining the cut-off distance\nWe will first determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  3.001  12.555  20.575  22.026  28.240  71.769 \n\n\nThe summary report shows that the largest first neighbour distance is 71.769km, so using this as the upper threshold gives certainty that all units will have at least one neighbour."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#computing-fixed-distance-weight-matrix",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#computing-fixed-distance-weight-matrix",
    "title": "Take-Home_Ex1",
    "section": "5.2 Computing fixed distance weight matrix",
    "text": "5.2 Computing fixed distance weight matrix\nUsing the code chunk below, we will compute the distance weight matrix using dnearneigh() of spdep.\n\nwm_d72 <- dnearneigh(coords, 0, 72, longlat = TRUE)\nwm_d72\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 18114 \nPercentage nonzero weights: 3.031485 \nAverage number of links: 23.43338 \n\n\nThe summary report above shows that on average, each area unit is nearest in distance to another 23 area units.\n\n5.2.1 Plotting fixed distance weight matrix\nUsing the code chunk below, we will plot the distance weight matrix.\n\npar(mfrow=c(1,2))\nplot(nga_wp$geometry, border = \"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length = 0.08)\nplot(nga_wp$geometry, border = \"lightgrey\")\nplot(wm_d72, coords, add=TRUE)\n\n\n\n\n\n\n5.2.2 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours while the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nUsing the code chunk below, we will control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry. We will set the number of neighbours at 8.\n\nknn8 <- knn2nb(knearneigh(coords, k=8))\nknn8\n\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 6184 \nPercentage nonzero weights: 1.034929 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\n\n\n\n5.2.2.1 Plotting distance based neighbours\nUsing the code chunk below, we can plot the weight matrix.\n\nplot(nga_wp$geometry, border = \"lightgrey\")\nplot(knn8, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n5.2.3 Row-standarised weights matrix\nNext, we will assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this method summaries the neighbors’ values, one drawback is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this study, we’ll be using style=“W” option.\n\nrswm_q <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 281.9605 3193.332"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#spatial-lag-with-row-standardised-weights",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#spatial-lag-with-row-standardised-weights",
    "title": "Take-Home_Ex1",
    "section": "6.1 Spatial lag with row-standardised weights",
    "text": "6.1 Spatial lag with row-standardised weights\nWe will be computing the average neighbour non-functional wpt value for each polygon. Using the code chunk below, we append the spatially lag non-functional waterpoint values onto the Nigeria sf data frame using left_join().\n\nlag.list <- list(nga_wp$ADM2_CODE, lag.listw(rswm_q, nga_wp$`wpt non-functional`) )\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"ADM2_CODE\", \"lag wpt non-functional\")\nnga_wp <- left_join(nga_wp, lag.res)\n\nJoining, by = \"ADM2_CODE\"\n\n\nUsing the code chunk below, we will now plot both the non-functional wpt and the spatial lag non-functional wpt for comparison.\n\nnft <- qtm(nga_wp, \"wpt non-functional\")\nlag_nft <- qtm(nga_wp, \"lag wpt non-functional\")\n\ntmap_arrange(nft, lag_nft, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "title": "Take-Home_Ex1",
    "section": "6.2 Spatial lag as a sum of neighbouring values",
    "text": "6.2 Spatial lag as a sum of neighbouring values\nNext, we will calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe will start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, to manipulate the neighbors structure. This applies a function across each value in the neighbors structure.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 773 \nNumber of nonzero links: 4484 \nPercentage nonzero weights: 0.7504238 \nAverage number of links: 5.800776 \n\nWeights style: B \nWeights constants summary:\n    n     nn   S0   S1     S2\nB 773 597529 4484 8968 114240\n\n\nWith the weights assigned, we will now use lag.listw of spdep to compute a lag variable from our weight and non-functional wpt.\n\nlag_sum <- list(nga_wp$ADM2_CODE, lag.listw(b_weights2, nga_wp$`wpt non-functional`))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"ADM2_CODE\", \"lag_sum wpt non-functional\")\n\nUsing the code chunk below, we will append the lag_sum wpt non functional to the nga_wp sf data frame\n\nnga_wp <-left_join(nga_wp, lag.res)\n\nJoining, by = \"ADM2_CODE\"\n\n\nUsing the code chunk below, we can now plot both the non-functional water points and spatial lag non-functional water points for comparison.\n\nnft <- qtm(nga_wp, \"wpt non-functional\")\nlag_sum_nft <- qtm(nga_wp, \"lag_sum wpt non-functional\")\ntmap_arrange(nft, lag_sum_nft, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#morans-i",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#morans-i",
    "title": "Take-Home_Ex1",
    "section": "7.1 Moran’s I",
    "text": "7.1 Moran’s I\nUsing the code chunk below, we will perform the Moran’s I statistics testing by using moran.test() of spdep.\n\nmoran.test(nga_wp$`wpt non-functional`,\n           listw = rswm_q,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt non-functional`  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 19.973, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4301096187     -0.0012953368      0.0004665373 \n\n\nAs p-value is <0.025, we can conclude that it is statistically significant that the distribution of non-functional waterpoints are randomly distributed.\n\n7.1.1 Computing Monte Carlo Moran’s I\nUsing the code chunk below, we will perform permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1,000 simulations will be performed.\n\nset.seed(1234)\nbperm = moran.mc(nga_wp$`wpt non-functional`,\n                 listw = rswm_q,\n                 nsim=999,\n                 zero.policy = TRUE,\n                 na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43011, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the output above, as p-value is < 0.025, it supports the earlier statistical conclusion that the distribution of the non-functional water points are indeed randomly distributed.\n\n\n7.1.2 Visualising Monte Carlo Moran’s I\nIn the code chunk below, we will examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram, using hist() and abline() of R Graphics.\n\nmean(bperm$res[1:999])\n\n[1] -0.0009951148\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.0004829448\n\n\n\nsummary(bperm$res[1:999])\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-0.0587890 -0.0165490 -0.0019268 -0.0009951  0.0145196  0.0651229 \n\n\n\nhist(bperm$res,\n     freq=TRUE,\n     breaks =20,\n     xlab=\"Simulated Moran's I\")\nabline(v=0, col=\"red\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#section-2",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#section-2",
    "title": "Take-Home_Ex1",
    "section": "",
    "text": "8.1 Computing local Moran’s I\nUsing the code chunk below, we will compute local Moran’s I, using the localmoran() function of spdep. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\n\nfips <- order(nga_wp$ADM2_CODE)\nlocalMI <- localmoran(nga_wp$`wpt non-functional`, rswm_q)\nhead(localMI)\n\n             Ii          E.Ii       Var.Ii         Z.Ii Pr(z != E(Ii))\n1 -0.3293461319 -1.006443e-03 0.1935434145 -0.746335642      0.4554647\n2 -0.0232170719 -2.046812e-05 0.0039399933 -0.369552942      0.7117156\n3  0.1049642343 -1.133492e-03 0.1449200709  0.278703106      0.7804727\n4  0.4133135297 -6.705952e-04 0.0641649070  1.634311750      0.1021934\n5 -0.0138498133 -1.701640e-06 0.0002178059 -0.938330308      0.3480747\n6  0.0004439503 -1.071807e-04 0.0164824028  0.004292839      0.9965748\n\n\nThe output above from localmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\n8.1.1 Mapping the local Moran’s I\nUsing the code chunk below, we will append the local Moran’s I dataframe (i.e. localMI) onto Nigeria SpatialPolygonDataFrame. The output SpatialPolygonDataFrame is called nga.localMI.\n\nnga.localMI <- cbind(nga_wp, localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n8.1.2 Mapping both local Moran’s I values and p-values\nUsing the code chunk below, we will:\n\nPlot the local Moran’s I values using choropleth mapping functions of tmap package.\nProduce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\n\nlocalMI.map <- tm_shape(nga.localMI)+\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"Local Moran's I  Statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(nga.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#creating-a-lisa-cluster-map",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#creating-a-lisa-cluster-map",
    "title": "Take-Home_Ex1",
    "section": "8.2 Creating a LISA Cluster Map",
    "text": "8.2 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n8.2.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nUsing the code chunks below, we will plot the Moran scatterplot of non-functional waterpoints by using moran.plot() of spdep.\n\nnci <- moran.plot(nga_wp$`wpt non-functional`, rswm_q,\n                  labels=as.character(nga_wp$HRname), \n                  xlab=\"Non Functional Water Points \", \n                  ylab=\"Spatially Lag Non Functional Water Points\")\n\n\n\n\nThe output is split into 4 quadrants. The top right corner belongs to areas that have high non-functional water points and are surrounded by other areas that have the average level of non-functional water points.\n\n\n8.2.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to center and scale the variable. Centering is done by subtracting the mean from the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations. as.vector() will be added to the end to make sure that the data type we get out of this is a vector, that map neatly into the dataframe.\n\nnga_wp_Z <- scale(nga_wp$`wpt non-functional`) %>%\n  as.vector\n\nUsing the code chunk below, we will plot the Moran scatterplot again.\n\nnci2 <- moran.plot(nga_wp_Z, rswm_q,\n                   labels=as.character(nga_wp$HRname),\n                   xlab=\"z-Non-Functional Water Points\", \n                   ylab=\"Spatially Lag z-Non-Functional Water Points\")\n\n\n\n\n\n\n8.3 Preparing LISA map classes\nUsing the code chunks below, we will prepare the LISA cluster map.\n\nquadrant <- vector(mode=\"numeric\", length=nrow(localMI))\n\nNext, we will derive the spatially lagged variable of interest (i.e. non functional water points) and centers the spatially lagged variable around its mean.\n\nnga_wp$`lag wpt non-functional` <- lag.listw(rswm_q, nga_wp$`wpt non-functional`)\nDV <- nga_wp$`lag wpt non-functional` - mean(nga_wp$`lag wpt non-functional`)\n\nThis is followed by centering the local Moran’s I around the mean.\n\nLM_I <- localMI[,1] - mean(localMI[,1])\n\nNext, we will set up a statistical significance level for the local Moran.\n\nsignif <- 0.05\n\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4 \n\nLastly, we place the non-significant Moran in the category “0”.\n\nquadrant[localMI[,5]>signif] <- 0"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#plotting-lisa-map",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#plotting-lisa-map",
    "title": "Take-Home_Ex1",
    "section": "8.4 Plotting LISA map",
    "text": "8.4 Plotting LISA map\nUsing the code chunks below, we can now build the LISA map.\n\nnga.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nga.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local MOran’s I values map and its corresponding p-values next to each other.\nUsing the code chunks below, we will create such a visualisation.\n\nnft <- qtm(nga_wp, \"wpt non-functional\")\n\nnga.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(nga.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(nft, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\nUsing the code chunks below, we will also include the local Moran’s I map and p-value map for easier comparison.\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1.html#getis-and-ords-g-statistics",
    "href": "Take-Home_Ex/Take-Home_Ex1.html#getis-and-ords-g-statistics",
    "title": "Take-Home_Ex1",
    "section": "9.1 Getis and Ord’s G-Statistics",
    "text": "9.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\n\n9.1.1 Gi statistics using fixed distance\nUsing the code chunk below, we will first convert the nb object (i.e. wm_d72) into a spatial weights object using nb2listw() of spdep. Then we will compute the local spatial G statistics for each neighbour using localG() of spdep.\n\nwm72_lw <- nb2listw(wm_d72, style = \"B\")\ngi.fixed <- localG(nga_wp$`wpt non-functional`, wm72_lw)\ngi.fixed\n\n  [1] -3.380059734 -3.470321267 -0.682027168 -2.580765996 -2.733360867\n  [6] -3.796521918 -3.682181842 -4.550525968 -3.341095288 -0.589163130\n [11] -3.864641280 -3.447120859 -2.951498982 -3.318339711 -4.923572348\n [16] -3.664229904 -3.467518021 -2.030191048 -2.477226117 -2.534453096\n [21] -0.455056239 -2.738821858  0.711944774 -1.546479002 -0.749567933\n [26] -2.507241912 -2.843287484 -2.958714306 -2.949330818 -1.514519229\n [31] -0.299815824 -0.318320495 -1.957359094 -2.207022949 -1.050091650\n [36] -0.267306984 -0.623252204 -2.456978938 -1.186343601 -1.967901316\n [41] -1.454809938 -0.896390925 -0.138217485 -1.539332060 -0.006785383\n [46] -0.696185182 -0.191412548 -2.022511966 -0.047336693 -0.877739729\n [51] -2.020477626 -2.096620225  0.225975931 -0.027973960 -0.511112218\n [56] -6.035899720 -5.934326141 -4.873460968 -6.042176829 -6.181294594\n [61] -6.320924011 -5.352115731 -5.922624093 -5.616857560 -5.606515866\n [66] -5.656617664 -5.566625845 -5.999050186 -5.733991934 -5.863726164\n [71] -5.423127731 -5.454532436 -5.324939045 -6.215157511 -5.641714440\n [76] -5.854748681  2.426681285 -0.959722330  2.493788959 -0.225572817\n [81]  0.333177760 -0.059436166 -0.070895494 -0.605148892 -0.281358014\n [86]  0.848729139 -0.493350695  0.018694041  1.535986180 -0.394928823\n [91]  0.665897757 -0.371767020  1.500497500 -0.367395062 -1.133626267\n [96]  0.776089334 -3.258918043 -2.486056540 -3.390133272 -3.588397390\n[101] -3.367989091 -1.223587621 -0.223901586 -0.332962011  1.840525408\n[106]  1.803376151  0.314646875  0.150053586  0.273001326  2.277126976\n[111]  2.771821229  1.568736862  0.252092572  0.572443402 -2.093851548\n[116] -1.168987747  1.910374182 -1.188727918 -0.075440830  1.453423490\n[121]  1.922261349  2.404524083  4.118764935 -2.891216152  0.460860472\n[126] -2.457419080 -2.106534234 -2.053597249 -2.524445633 -2.229413652\n[131] -2.767196134 -2.447588786 -2.338972745 -2.463923536 -2.313859840\n[136] -0.086828121 -2.570884252 -2.027851790 -2.159361219 -2.524445633\n[141] -2.550397321 -0.600126323  0.840595475  3.629433235  0.692245750\n[146]  0.183875131  3.763447742  2.876134560  3.600916366  3.523982777\n[151]  1.304253205  2.709432530 -4.092361040 -4.340853743 -2.996332559\n[156] -2.853730557 -2.502466181 -3.411680085 -3.018068766 -2.780015909\n[161] -3.012773189 -4.698901812 -4.169508256 -2.821579124 -4.860304152\n[166] -5.371236456 -3.390914936 -2.420156345 -2.793877263 -2.842514483\n[171] -3.120846868 -3.695611894 -2.630106568 -2.688653001  2.673399426\n[176] -0.013749451 -0.776426342  1.273886794  0.604645839  0.254261737\n[181]  2.338829188 -1.592825991 -2.827698492  2.700427411 -1.000191906\n[186] -0.147803067 -0.760424707  1.863245525 -0.919295798 -2.582141306\n[191] -2.117886340 -3.592259128 -1.810752342 -1.872209194 -0.901918210\n[196] -0.425930912 -2.482611983 -2.230920679 -1.028653755 -2.794518876\n[201]  0.115323963  0.517483163  1.368832219  1.118640883 -1.587844887\n[206]  4.338792936  5.434208074  3.662909209  4.471689000  5.094259006\n[211]  3.071628696  3.875821728  5.263701786  4.681312813  4.243581887\n[216]  4.164599199  5.998649324  5.399847857  3.872781317  5.535715328\n[221]  4.233612675 -2.686582188 -4.368315084 -2.655463714 -3.137119046\n[226] -3.368181299 -5.552454931 -3.273064832 -2.619183872 -2.656629537\n[231] -2.205173635 -1.747239463 -3.435484399 -2.866582804 -5.563496731\n[236] -2.226870754 -4.397480861 -3.990758755 -0.182047437  1.198020805\n[241]  0.121192051  5.980410682  5.707401115  5.307333137  1.940665281\n[246]  1.558222263  2.651562748  5.378512525  4.654192358  3.638525311\n[251]  5.346818355  4.955656841  5.433018688  5.478298292  0.553586621\n[256]  0.511538911  0.420324321  1.315717117  0.336684068  0.082571826\n[261] -0.128179740  0.037218303  0.116206915  0.131265055 -0.154502935\n[266]  0.455621216  2.988978651 -0.202329062  3.201622016  1.845572357\n[271]  1.221434980  4.808362173  2.671525155  3.200126075  0.939693664\n[276]  3.027921348  2.354106111 -4.035450001 -4.647306805 -4.949882616\n[281] -4.019322320 -5.650406496 -5.539476982 -4.278231758 -4.670828979\n[286] -5.388600395 -5.462052410 -5.174283834 -4.154507197 -5.498949556\n[291] -5.517020926 -5.626782019 -3.950074837 -5.387739941 -4.794223406\n[296] -5.358110942 -5.747121700 -5.580992844 -5.357132821 -5.338282965\n[301] -4.274996333 -4.059771272 -4.263094657 -5.521587631  0.789151659\n[306]  1.870952430  0.210333884  0.159472405 -0.203471219  0.416951824\n[311]  1.409357156  1.330197417  1.345270142  1.473032500 -0.582681618\n[316]  1.608854312  0.704505162  0.517509062  1.360908262  1.426954121\n[321]  1.330600399  0.666167796  0.912682834  1.169032282  0.921113297\n[326]  0.759290043  0.856143371  1.770460310 -0.534199682 -0.231506219\n[331]  1.845332667  3.614850921  0.405467331  4.279739391  1.655668322\n[336]  2.864359824  2.092505811  1.599640064  3.549452838  1.769789101\n[341]  2.864644749  2.277504564  0.278639449  3.235680339 -0.439020953\n[346]  1.862884359  3.155217694  3.009916882  3.776987397  2.681555163\n[351]  3.562263557  4.120735903 -0.149161781 -0.281603859 -1.770381649\n[356] -0.761831452 -1.299551089 -1.097118454 -1.896418666 -0.046380170\n[361] -1.426084465 -1.178438011 -0.050433088 -1.530236274  0.099357126\n[366] -0.542169146 -1.534618097 -0.080283202 -1.160436527 -1.911847815\n[371] -2.260505313 -2.081799688 -2.071365630 -2.099702038 -0.679590974\n[376] -1.085350813 -2.075566823 -0.441161273 -1.653779076 -1.937209587\n[381] -0.006869681 -0.108246678 -1.360219878 -0.827835772 -1.863842732\n[386]  0.969115212 -1.820800384 -0.193739396  0.092546469 -2.062968306\n[391] -1.659964924 -1.406567763 -0.135560618 -1.153186211 -1.383888765\n[396] -1.290907714  0.802204033  0.560275954  0.360616912  1.006238243\n[401]  0.320487229 -0.369585464  2.291755296  2.405032809  1.595099700\n[406]  1.825270133 -0.789478339 -0.535960654  2.374748761  1.298894415\n[411]  0.732594952 -1.242374156 -0.425441245  1.390596619 -0.162600929\n[416] -0.181942635 -0.839382911  1.447930044 -0.848581834 -1.304730059\n[421]  1.212438644  2.405229960  2.155603308 -0.234832047  1.005441188\n[426]  0.877687116 -0.288788456  1.231966351  1.199286883  0.128575814\n[431]  0.626022336  1.280209158  1.563773636 -0.162012136  1.674070429\n[436]  0.892745658  0.885331118  0.556597921  1.825573061  0.131688356\n[441]  1.128703743  0.263977913  2.034232668 -0.284061321 -1.556689520\n[446] -0.064312063 -0.963706349 -3.212588185 -1.632482484 -2.559948477\n[451]  2.632036110  1.264552890  0.265816090  0.083616838  3.310008007\n[456] -1.378450386  2.167501842  2.075628907  1.242741468 -2.041712645\n[461]  0.858839647  3.742458698  3.992446750  5.162047444  3.912326416\n[466]  4.139026709  4.480476711  5.977391682  5.127787367  5.173225442\n[471]  5.377063969  5.868493775 -0.271414777  3.211881308  5.781290483\n[476]  4.897475043  4.893076188  1.093264759 -2.590641453 -2.092258214\n[481] -2.730459737 -2.102110538 -2.646649406 -2.258759895 -2.155402745\n[486] -2.372651733 -2.197394091  2.370667004  2.377883445  1.139956984\n[491]  1.653640545  0.944614999  1.633785682  2.078326842  1.179845891\n[496] -0.114720760  1.684508300  1.483929353  1.260296800  3.812315771\n[501]  0.525818938  0.287232673  1.596388703 -0.013204782 -0.180275076\n[506]  0.973020939  0.479882760  0.945407246  0.721357121  0.186931470\n[511]  0.071846400  1.205057029 -0.008262037  0.262149990 -0.078112931\n[516]  2.309302118 -0.778436587 -0.960561704 -0.035778858  0.356315110\n[521] -0.633759790  1.299643292  1.338474683 -0.218532750 -1.048812552\n[526] -2.034368549 -3.154440536 -2.192713811 -2.518652921 -2.681517141\n[531]  1.117166311  0.196304228 -0.383926777 -1.641513991 -3.453101399\n[536] -3.066610795 -1.616833398 -3.417677873 -2.039377800 -3.169579875\n[541]  2.396092740  2.286834627  1.966569902  2.352146819  4.069411869\n[546]  4.145265397  0.195081136  2.938690985  3.913171862  4.578048306\n[551]  1.218125246  1.482570687  1.326479354  3.877161778  3.821585648\n[556]  1.505866203  2.630150063  1.863210564  3.106801675  4.635068034\n[561]  4.736980037  5.356940930  4.847477765  5.646212959  4.872211599\n[566]  5.391293528  3.402557732  5.175462647  5.062847217  3.420181488\n[571]  4.089345736  6.558693333  4.339589859  6.645652219 -1.022100095\n[576] -1.140391112 -0.497909427 -0.038811603  0.407471426 -0.036279962\n[581] -0.034723234 -0.236166200  1.367049636  3.229361854  3.555426425\n[586]  4.161547167  0.688935932 -0.166134426  0.297890984 -0.253702431\n[591]  1.859595925  1.550400661 -0.139146006 -0.432926043  4.194597931\n[596]  2.367111477  1.394873069  3.748646949  1.386168494  2.088354340\n[601]  2.231543735  0.688294833  1.976952184  2.296260892  2.541595822\n[606]  2.663986832  3.154429791  3.311141357  2.995481393  2.676270856\n[611]  2.154786925  1.775896776 -3.548107907 -3.436825623 -3.097465228\n[616] -4.018960161 -3.005997609 -4.114722870 -3.859176211 -2.773576756\n[621] -3.969474772 -2.277620255 -3.665526423 -4.145710585 -2.792817627\n[626] -3.218378003 -3.712623756 -2.710004032 -3.369988973 -2.813675620\n[631] -0.391207359 -0.608716494 -1.194744177 -1.035281064 -0.929349982\n[636] -0.577210144  0.252632276 -0.884035195 -1.110147792 -0.361312214\n[641] -0.185167432 -0.689466945 -0.676658432  0.370039028 -1.135353658\n[646] -1.033842403 -0.691531349 -0.203942258  1.353522051  1.684431850\n[651]  2.579147641  1.119409668  1.828340042  0.908076472  1.926861943\n[656]  0.685835744  0.716681697 -0.179463075 -0.991321668 -1.457180348\n[661] -1.734939369 -1.944970846 -0.197837042 -1.946351402 -1.547116200\n[666] -2.188840636 -0.131148912  0.236844073 -0.973228817 -0.264187258\n[671]  0.009530063 -0.587336899 -1.687777413  0.176602608 -0.151643129\n[676] -0.504510898  0.187037819 -0.509937179 -0.796321878 -0.560208054\n[681] -0.540601233 -0.908930374 -0.444907208 -0.596787747 -1.221890911\n[686] -1.026238884 -1.189032325  0.248233055 -0.077201579  1.181293794\n[691] -0.374645495 -0.707571781  0.200496682 -1.007988832  1.294413953\n[696]  1.238938711  1.532617709  1.721868272  2.534827972  1.832244931\n[701]  1.794980215  1.760082818  0.722605370 -0.329166832 -1.192355910\n[706] -1.593486311 -1.593486311 -2.256462329 -2.524445633 -1.952882705\n[711] -1.952882705 -2.730980900 -2.135150856 -2.221614678 -2.156490462\n[716] -2.116467448  0.323516674 -2.447094275 -0.876537600  0.440694582\n[721] -0.293656157 -0.075992761  0.143553425 -0.642860616  0.621176122\n[726]  1.292247029 -1.952882705 -2.188840636 -2.067121588 -2.644650260\n[731] -2.567801215 -2.282357247 -2.107098386 -2.490771564 -1.892914538\n[736] -1.047352029 -0.294526927 -1.035745192  0.629224825  1.657733172\n[741]  2.129349181  1.816508812  2.906157378  3.162041211  3.440088285\n[746]  2.912953868  3.015563648  0.037965862 -3.024430382 -2.365289762\n[751]  1.356178252 -2.197862792 -3.071445074 -1.959758858  0.323577337\n[756]  0.256373490  0.351782030 -0.016193068 -1.936577211 -3.876929808\n[761] -3.905415966 -2.469058329 -1.953514136 -2.395895189 -2.734970804\n[766] -2.608842400 -1.624818339  0.985477818 -3.092673470 -2.372515183\n[771] -2.030508432 -2.982181949 -0.133373018\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  High Low  Low  Low  High Low  Low  High High High Low \n [16] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [31] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High High High\n [46] Low  High High High Low  High Low  Low  High High Low  Low  Low  Low  Low \n [61] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [76] Low  Low  Low  Low  Low  High Low  High Low  Low  Low  Low  High Low  High\n [91] Low  High Low  Low  Low  High Low  Low  Low  High Low  Low  High Low  High\n[106] High High High Low  High High High Low  Low  Low  Low  Low  Low  Low  Low \n[121] High High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[136] Low  Low  Low  Low  Low  Low  Low  High High High Low  High High High High\n[151] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low \n[166] Low  Low  Low  Low  Low  Low  Low  Low  Low  High High Low  High Low  High\n[181] Low  High Low  Low  High High High High Low  Low  Low  Low  Low  Low  Low \n[196] Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low  High High\n[211] Low  High Low  High High High Low  Low  Low  High High Low  Low  Low  Low \n[226] Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  High\n[241] High Low  High High High Low  Low  High High Low  High High Low  High Low \n[256] High Low  Low  Low  Low  High Low  Low  High High High High High High High\n[271] High Low  High High High High High Low  Low  Low  Low  Low  Low  Low  Low \n[286] Low  Low  Low  Low  Low  Low  Low  Low  High High Low  Low  Low  Low  Low \n[301] Low  Low  Low  Low  High High High Low  Low  Low  High High High Low  Low \n[316] High Low  Low  Low  Low  High High Low  Low  Low  High High High High High\n[331] Low  High Low  High Low  High High High High High High High Low  High High\n[346] Low  High High High High High Low  Low  High High Low  High Low  High High\n[361] High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High Low \n[376] High Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High High Low \n[391] Low  Low  High High High Low  Low  Low  High High High Low  Low  Low  High\n[406] Low  High High Low  Low  Low  Low  Low  High High Low  Low  High Low  Low \n[421] High Low  Low  Low  High High Low  High High Low  High High High High Low \n[436] High High High Low  High Low  Low  Low  Low  High High High Low  Low  Low \n[451] High Low  High Low  High Low  Low  Low  High Low  Low  Low  High Low  High\n[466] High High High Low  Low  High High High High High High High High Low  Low \n[481] High Low  Low  Low  Low  Low  Low  High High High High Low  Low  Low  High\n[496] High High High High Low  High High Low  Low  Low  High High Low  Low  Low \n[511] Low  High High High Low  High High Low  Low  High Low  Low  Low  High Low \n[526] High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High\n[541] High High High High Low  Low  High High High High High High High High High\n[556] High High High High Low  High High High High Low  High High High High High\n[571] High Low  High High High Low  High High Low  Low  Low  High High High Low \n[586] High Low  Low  Low  Low  High Low  High High High High High High High Low \n[601] High High High High Low  High High High High High High High Low  Low  Low \n[616] Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low \n[631] High High Low  Low  High High Low  High Low  Low  Low  Low  Low  High High\n[646] High Low  High High High High High Low  High High High High High High High\n[661] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[676] Low  Low  Low  Low  Low  Low  Low  High Low  High Low  High Low  High High\n[691] Low  High Low  High High Low  High High Low  High High Low  Low  Low  Low \n[706] Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High Low  Low  Low \n[721] High High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[736] Low  Low  High Low  High High High High High High High High High High Low \n[751] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[766] Low  Low  Low  High Low  Low  High High\nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt non-functional`, listw = wm72_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nGi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nUsing the code chunk below, we will next join the Gi values to their corresponding Nigeria sf data frame. First, it converts the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join nga_wp and gi.fixed matrix to produce a new SpatialPolygonDataFrame called nga.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\nnga.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n9.1.2 Mapping Gi values with fixed distance weights\nUsing the code chunk below, we wil map the Gi values derived using fixed distance weight matrix.\n\nnft <- qtm(nga_wp, \"wpt non-functional\")\n\nGimap <-tm_shape(nga.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"Local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(nft, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n9.1.3 Gi statistics using adaptive distance\nUsing the code chunk below, we will compute the Gi values by using an adaptive distance weight matrix. We will first convert the nb object (i.e. knn8) into a spatial weights object using nb2listw() of spdep. Then we will compute the local spatial G statistics for each neighbour using localG() of spdep.\n\nknn8_lw <- nb2listw(knn8, style = \"B\")\ngi.adaptive <- localG(nga_wp$`wpt non-functional`, knn8_lw)\nnga.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n9.1.4 Mappin Gi values with adaptive distance weights\nUsing the code chunks below, we will visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\n\nnft<- qtm(nga_wp, \"wpt non-functional\")\n\nGimap <- tm_shape(nga.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"Local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(nft, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  }
]