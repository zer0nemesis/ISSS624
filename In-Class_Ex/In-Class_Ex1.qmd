---
title: "In-Class_Ex1"
author: "Roger"
editor: visual
---

# Overview

Computing spatial weights using R

```{r}
packages = c('sf', 'spdep', 'tmap', 'tidyverse')
for (p in packages){
  if(!require(p, character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```

## Importing the data

Importing shapefile as simple features object of sf

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

Importing csv file as R dataframe class

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012)
```

## Visualising regional development indicator

Preparing basemap and choropleth map showing the distribution of GDPPC2012 by using qtm()

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing contiguity spatial weights

Building a neighbours list based on regions with contiguous boundaries

### Computing(QUEEN) contiguity based neighbours

Computing Queen contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

Seeing the neighbours for the first polygon in the object

```{r}
wm_q[[1]]
```

Retrieving country name of polygonID=1

```{r}
hunan$County[1]
```

Revealing county names of five neighbouring polygons

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

Retrieving the GDPPC of these five counties

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Displaying the complete weight matrix using str()

```{r}
str(wm_q)
```

### Creating (ROOK) contiguity based neighbours

Computing Rook contiguity weight matrix

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### Visualising contiguity weights

To get longitude values, map st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\]and 1.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Doing the same for latitude, BUT accessing the second value per each centroid with \[\[2\]\]

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Putting longitude and latitude together with cbind

```{r}
coords <- cbind(longitude, latitude)
```

Checking the first few observations for correct formatting

```{r}
head(coords)
```

#### Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting both Queen and Rook contiguity based neighbours map

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## Computing distance based neighbours

Identifying neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.

### Determine the cut off distance

Determining the upper limit for distance band by:

-   Returning a matrix with the indices of points belonging to the set of the k nearest neighbours of each other using knearneigh()

-   Converting the knn object into a neighbours list of class nd with a list of integer vectors containing neighbour region ids by using knn2nb()

-   Returning the length of neighbour relationship edges by using nbdists()

-   Removing the list structure of returned objects by using unlist()

```{r}
#coords <- coordinates(hunan)

k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing fixed distance weight matrix

Computing distance weight matrix using dnearneigh()

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

*Average number of links means that on average, each region point area is nearest in distance to another 3.68 point areas*

Displaying the content of wm_d62 weight matrix

```{r}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine table() and card()

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

Plotting distance weight matrix

The red lines show the links of 1st nearest neighbours and black lines show links of neighbours within the cut-off distance of 62km

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

Alternatively, we can plot both of them next to each other

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### Computing adaptive distance weight matrix

More densely settled areas (usually urban areas) tend to have more neighbours and less densely areas (usually rural counties) tend to have less neighbours.

Controlling the number of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposin symmetry

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

*notice for both knearneigh() and str(), each county has EXACTLY six neighbours*

```{r}
str(knn6)
```

#### Plotting distance based neighbours

Plotting weight matrix

```{r}
plot(hunan$geometry, border= "lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weight based on IDW

Deriving spatial weight matrix based on Inversed Distance method

First, compute distances between areas using nbdists()

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row standardised spatial weights matrix

Assigning weights to each neighbouring polygon (e.g. each neighbouring polygon will be assigned equal weight (style = "W"), by assigning fraction 1/(no. of neighbours), then summing the weighted income values

Drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under- estimating the true nature of the spatial auto-correlation (other mobre robust options are available, e.g. style = "B")

*zero.policy=TRUE option allows for list of non-neighbours*

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

Weight of first polygon's four neighbours type. Each neighbour is assigned a 0.2 of total weight. This means that each neighbour's income will be multiplied by 0.2 before being tallied

```{r}
rswm_q$weights[10]
```

```{r}
rswm_ids <- nb2listw(wm_q, glist = ids, style = "B", zero.policy = TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of spatial weight matrix

Creating four different spatial lagged variables:

-   Method 1: Spatial lag with row standardised weights

-   Method 2: Spatial lag as a sum of neighbouring values

-   Method 3: Spatial window average

-   Method 4: Spatial window sum

### Method 1: Spatial lag with row standardised weights

Computing average neighbour GDPPC value for polygon (these values referred to as spatially lagged values)

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Retrieving the GDPPC of these five counties

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Appending the spatially lagged GDPPC values onto hunan sf data frame

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan, lag.res)
```

Showing the average neighbouring income values for each county

```{r}
head(hunan)
```

Plotting both GDPPC and spatial lag GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp = 1, ncol=2)
```

### Method 2: Spatial lag as a sum of neighbouring values

Calculating spatial lag as a sum of neighboring values by assigning binary weights

Start by applying a function that will assign a value of 1 per each neighbor. using lapply

```{r}
b_weights <- lapply(wm_q, function(x) 0*x +1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights,
                       style = "B")
b_weights2
```

Computing a lag variable from weight and GDPPC using lag.listw

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag_sum
```

Appending lag_sum GDPPC into hunan sf data frame

```{r}
hunan <- left_join(hunan, lag.res)
```

Plotting GDPPC and Spatial Lag Sum GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)

```

### Method 3: Spatial window average

Using row-standardised weights and includes the diagonal element. To begin, assign k6 to a new variable as its structure will be altered to add the diagonal elements

```{r}
wm_q1 <- wm_q
```

Adding the diagonal element to the neighbour list using include.self()

```{r}
include.self(wm_q1)
```

Obtaining weights with nb2listw()

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

Creating the lag variable from weight structure and GDPPC variable

```{r}
lag_w_avg_gdppc <- lag.listw(wm_q1,
                             hunan$GDPPC)
lag_w_avg_gdppc
```

Converting lag variable listw object into a data .frame using as.data.frame()

```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Appending lag_window_avg GDPPC values onto hunan sf data.frame by using left_join()

```{r}
hunan <- left_join(hunan, lag_wm_q1.res)
```

PLotting GDPPC and lag_window_ave GDPPC using qtm()

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Method 4: Spatial window sum

Counter part of window average, without using row-standardised weights. To do this, assign binary weights to neighbour structure that includes diagonal element

```{r}
wm_q1 <- wm_q
```

Adding diagonal element to the neighbour list using include.self()

```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

Assigning binary weights to neighbour structure that includes diagonal element

```{r}
b_weights <- lapply(wm_q1, function (x) 0*x + 1)
b_weights[1]
```

Explicitly assigning weight values using nb2listw() and glist()

```{r}
b_weights2 <- nb2listw(wm_q1,
                       glist = b_weights,
                       style = "B")
b_weights2
```

Computing lag variable with new weight structure, using lag.listw()

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Converting lag variable listw object into a data frame using as.data.frame()

*Note: second command line renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively*

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Appending w_sum GDPPC values onto hunan sf data.frame using left_join()

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Plotting GDPPC and lag_sum GDPPC using qtm()

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```
