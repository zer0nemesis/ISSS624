---
title: "In-Class_Ex2: Geographically Weighted Logistic Regression (GWLR) and Application"
author: "Roger"
editor: visual
---

# 1. Overview

In this in-class exercise, we will learn the basic concepts and methods of Geographical Weighted Logistic Regression (GWLR) algorithm, namely:

-   Weighting functions (kernel)

-   Weighting schemes

-   Bandwidth

-   Interpreting and visualising

## 1.1 Model Variables

The dependent variable will be the water point status (i.e. functional, non-functional).

The independent variables are:

-   distance_to_primary_road

-   distance_to_secondary_road

-   distance_to_tertiary_road

-   distance_to_city

-   distance_to_town

-   water_point_population

-   local_population_1km

-   usage_capacity

-   is_urban

-   water_source_clean

*Note: All variables are continuous, **except** the last three variables which are categorical.*

## 1.2 Setting the scene

To build an explanatory model to discover factors affecting water point status in Osun State, Nigeria

# **2. Getting Started**

## 2.1 Installing and loading R packages

In the code chunk below, we will install and launch these R packages into R environment.

```{r}
pacman::p_load(sf, tidyverse, funModeling, blorr, corrplot, ggpubr, spdep, GWmodel, tmap, skimr, caret)
```

## 2.2 Importing the analytical data

Two data sets will be used in this study:

-   osun_wp_sf.rds - Nigeria Level 2 administrative boundary (also known as Local Government Area) .

-   osun_rds - Water point geospatial data.

Using the code chunk below, we will extract the using read_rds of Base R.

```{r}
Osun <- read_rds("rds/Osun.rds")
Osun_wp_sf <- read_rds("rds/Osun_wp_sf.rds")
```

# 3. Exploratory Data Analysis

Using the code chunk below, we will examine the proportion of functional and non-functional water points, represented by "True" and "False" respectively.

```{r}
Osun_wp_sf %>%
  freq(input = "status")
```

```{r}
tmap_mode("view")
tm_shape(Osun)+
  tm_polygons(alpha=0.4)+
  tm_shape(Osun_wp_sf) +
  tm_dots(col="status",
          alpha=0.6)+
  tm_view(set.zoom.limits = c(9,12))
```

Using the code chunk below, we will generate the summary statistics will skimr() of Base R.

```{r}
Osun_wp_sf %>%
  skim()
```

```{r}
Osun_wp_sf_clean <- Osun_wp_sf %>%
  filter_at(vars(status,
                 distance_to_primary_road,
                 distance_to_secondary_road,
                 distance_to_tertiary_road,
                 distance_to_city,
                 distance_to_town,
                 water_point_population,
                 local_population_1km,
                 usage_capacity,
                 water_source_clean),
            all_vars(!is.na(.))) %>%
  mutate(usage_capacity = as.factor(usage_capacity))
```

Things to learn from the code chunk above,

# 4. Correlation Analysis

In the code chunks below,

```{r}
Osun_wp <- Osun_wp_sf_clean %>%
  select(c(7,35:39, 42,43,46,47,57)) %>%
  st_set_geometry(NULL)
```

```{r}
cluster_vars.cor = cor(
  Osun_wp[,2:7])
corrplot.mixed(cluster_vars.cor,
               lower="ellipse",
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

From the output above, as there is no correlation factor \>0.8, it is safe to assume there is no evidence of multi-colinearity between the continuous variables.

Using the code chunk below,

```{r}
model <- glm(status ~ distance_to_primary_road +
               distance_to_secondary_road + 
               distance_to_tertiary_road +
               distance_to_city +
               distance_to_town +
               is_urban +
               usage_capacity +
               water_source_clean +
               water_point_population +
               local_population_1km,
             data = Osun_wp_sf_clean,
             family = binomial(link = "logit"))
```

Instead of using a typical R report, we will generate a report using blr() of blorr package using the code chunk below.

```{r}
blr_regress(model)
```

From the report above, we can exclude the distance_to_primary_road and distance_to_secondary_road as there are not statistically significant at their p-value is \> 0.05.

# 5. Building a Logistic Regression Model

The validity of a cut-off is measured using sensitivity, specificity, and accuracy.

-   Sensitivity : The % of correctly classified events out of all events TP/ (TP + FN)

-   Specificity : The % of correctly classified non-events out of all non-events (TN / (TN + FP)

-   Accuracy : The % of correctly classified observations over all observations (TP + TN)/ (TP + FP + TN + FN)

```{r}
blr_confusion_matrix(model, cutoff = 0.5)
```

From the output above, we can see that the model can pick up the true positive (72.1%) better than the true negative (61.5%)

# 6. Building Geographically Weighted Logistic Regression Model

## 6.1 Converting from sf to sp data frame

Using the code chunk below,

```{r}
Osun_wp_sp <- Osun_wp_sf_clean %>%
  select(c(status,
           distance_to_tertiary_road,
           distance_to_city,
           distance_to_town,
           water_point_population,
           local_population_1km,
           is_urban,
           usage_capacity,
           water_source_clean)) %>%
  as_Spatial()

Osun_wp_sp
```

## 6.2 Building fixed bandwidth GWR model

### 6.2.1 Computing fixed bandwidth

Calulating the distance matrix

```{r}
bw.fixed <- bw.ggwr(status ~
                      distance_to_tertiary_road +
                      distance_to_city +
                      distance_to_town +
                      is_urban +
                      usage_capacity +
                      water_source_clean +
                      water_point_population +
                      local_population_1km,
                    data = Osun_wp_sp,
                    family = "binomial",
                    approach  = "AIC",
                    kernel = "gaussian",
                    adaptive = FALSE,
                    longlat = FALSE)
```

```{r}
bw.fixed
```

```{r}
gwlr.fixed <- ggwr.basic(status ~
                           distance_to_tertiary_road +
                           distance_to_city +
                           distance_to_town +
                           is_urban +
                           usage_capacity +
                           water_source_clean +
                           water_point_population +
                           local_population_1km,
                         data = Osun_wp_sp,
                         bw = bw.fixed,
                         family = "binomial",
                         kernel = "gaussian",
                         adaptive = FALSE,
                         longlat = FALSE)

```

```{r}
gwlr.fixed
```

From the output above, as AIC reduced from 5708.9(non-geographical weighted regression model) to 4418.8 (geographical weighted regression model), we can determine that there was an improvement in the regression model.

## 6.3 Model assessment

### 6.3.1 Converting SDF into sf data frame

To assess the performance of the gwLR, first, we will covert the SDF object in as data frame using the code chunk below.

```{r}
gwr.fixed <- as.data.frame(gwlr.fixed$SDF)
```

Next, in the code chunks below, we will label yhat values greater or equal to 0.5 into 1, else into 0. The result of the logic comparison operation will be saved into a field called most.

```{r}
gwr.fixed <- gwr.fixed %>%
  mutate(most = ifelse(
    gwr.fixed$yhat >= 0.5, T, F))
```

```{r}
gwr.fixed$y <- as.factor(gwr.fixed$y)
gwr.fixed$most <- as.factor(gwr.fixed$most)
CM <- confusionMatrix(data = gwr.fixed$most, reference = gwr.fixed$y)

CM
```

From the output above, we can see improvement the accuracy (from 67.4% to 88.5%). This is due to improvements in both sensitivity (from 72.1% to 86.7%) and specificity (from 61.5% to 89.9%).

## 6.4 Visualising gwLR

```{r}
Osun_wp_sf_selected <- Osun_wp_sf_clean %>%
  select(c(ADM2_EN, ADM2_PCODE,
           ADM1_EN, ADM1_PCODE,
           status))
```

```{r}
gwr_sf.fixed <- cbind(Osun_wp_sf_selected, gwr.fixed)
```

### 6.4.1 Visualising coefficient estimator

The code chunks below is used to create an interactive point symbol map.

```{r}
tmap_mode("view")
prob_T <- tm_shape(Osun) +
  tm_polygons(alpha = 0.1) +
  tm_shape(gwr_sf.fixed) +
  tm_dots(col = "yhat",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8,14))
prob_T
```

```{r}
tertiary_TV <- tm_shape(Osun) +
  tm_polygons(alpha = 0.1) +
  tm_shape(gwr_sf.fixed) +
  tm_dots(col = "distance_to_tertiary_road_TV",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8,14))
tertiary_TV
```

# 7. Reference

Atkinson PM, German SE, Sear DQ and Clark MJ (2003) ["Exploring the relations between riverbank erosion and geomorphological controls using geographically weighted logistic regression"](https://onlinelibrary.wiley.com/doi/abs/10.1111/j.1538-4632.2003.tb01101.x). *Geographical Analysis* 35(1): 58--82.
